{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"react\"","webpack:///external \"@grafana/data\"","webpack:///external \"@grafana/ui\"","webpack:///external \"@grafana/runtime\"","webpack:///external \"emotion\"","webpack:///../node_modules/react-use/node_modules/tslib/tslib.es6.js","webpack:///../node_modules/tslib/tslib.es6.js","webpack:///./types.ts","webpack:///./stravaApi.ts","webpack:///./polyline.ts","webpack:///./utils.ts","webpack:///./datasource.ts","webpack:///./components/VariableQueryEditor.tsx","webpack:///./components/ConfigEditor.tsx","webpack:///../node_modules/react-use/esm/useAsyncFn.js","webpack:///../node_modules/react-use/esm/useMountedState.js","webpack:///./components/AthleteLabel.tsx","webpack:///./components/QueryEditor.tsx","webpack:///./module.tsx"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__2__","__WEBPACK_EXTERNAL_MODULE__3__","__WEBPACK_EXTERNAL_MODULE__4__","__assign","assign","arguments","length","apply","this","extendStatics","b","setPrototypeOf","__proto__","Array","__extends","__","constructor","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","iterator","v","op","TypeError","pop","push","__values","__read","ar","error","__makeTemplateObject","cooked","raw","StravaAuthType","StravaMeasurementPreference","StravaQueryFormat","StravaQueryInterval","StravaQueryType","StravaActivityStat","StravaActivityData","StravaSplitStat","StravaActivityStream","VariableQueryTypes","datasourceId","backendAPIUrl","backendAuthUrl","promises","apiUrl","getAuthenticatedAthlete","tsdbRequest","getActivities","params","requestWithPagination","getActivity","id","include_all_efforts","getActivityStreams","streamType","key_by_type","keys","getSegment","url","data","chunk","page","limit","per_page","Math","min","concat","exchangeToken","authCode","tsdbAuthRequest","resetAccessToken","response","handleTsdbResponse","request","proxyfy","_request","datasourceRequest","method","endpoint","_tsdbRequest","headers","queryType","status","Error","statusText","responseData","func","funcName","funcScope","promiseKeeper","hash","getRequestHash","callOnce","args","srt","chr","len","charCodeAt","getHash","JSON","stringify","sign","decode","points","lat","lon","callback","values","x","current","bits","integers","metersToFeet","metersToMiles","paceToMiles","velocityToPace","mps","pace","fround","velocityToSpeed","velocityDataToPace","mp","point","paceMinkm","Feet","velocityDataToSpeed","speedKmph","metersDataToFeet","smoothVelocityData","sma","w_sum","w_count","j","DEFAULT_RANGE","from","to","instanceSettings","type","stravaApi","activities","stravaAuthType","jsonData","measurementPreference","Meters","query","options","athlete","measurement_preference","targets","some","before","range","unix","after","floor","target","hide","Activities","filteredActivities","filterActivities","activityType","format","Table","tableData","transformActivitiesToTable","WorldMap","geomapData","transformActivitiesToGeomap","Heatmap","heatmapData","transformActivitiesToHeatmap","tsData","transformActivitiesToTimeseries","Activity","queryActivity","activityData","SegmentEffort","queryActivitySegment","segmentData","activityId","replace","toString","activity","Stats","queryActivityStats","Splits","queryActivitySplits","Geomap","queryActivityGeomap","Segments","queryActivitySegments","activityStream","activityGraph","Pace","Velocity","streams","timeFiled","time","config","custom","valueFiled","number","frame","refId","fields","stream","ts","start_date","fitToTimeRange","timeStream","streamLength","streamValues","fill","add","unit","getPreferredSpeedUnit","Altitude","getPreferredLenghtUnit","HeartRate","GradeSmooth","WattsCalc","Watts","addField","segmentEffortId","segmentEffort","segment_efforts","find","se","querySegmentGeomap","segmentStream","segmentGraph","end_index","start_index","firstTsIndex","startIdx","splitStat","splits","splits_metric","splits_standard","split","Speed","getPreferredPace","getPreferredSpeed","elapsed_time","stats","singleActivityStat","other","activityStats","startsWith","gearStatsName","substring","gear","average_speed","topAchievement","effort","achievements","achievement","rank","Distance","getPreferredDistance","distance","ElevationGain","getPreferredLenght","total_elevation_gain","distanceUnit","lenghtUnit","string","decimals","hidden","segments","all","map","segment","detailedSegments","paceFieldIdx","findIndex","field","activity_type","moving_time","dataRow","pr_rank","average_heartrate","power","average_watts","elevation_high","elevation_low","grade","average_grade","PR","athlete_segment_stats","pr_elapsed_time","KOM","xoms","overall","segment_id","time_from","time_to","summaryPolyline","polyline","LatLng","startTs","timeticks","latitude","longitude","metricFindQuery","segmentEfforts","text","a","testDatasource","RefreshToken","getAuthCodeFromLocation","message","firstname","lastname","exec","window","location","search","filter","datapoints","statValue","getActivityStat","activityStat","valueOf","sort","dpA","dpB","interval","No","aggInterval","Auto","Hour","Day","Week","INTERVAL_1w","Month","INTERVAL_4w","getAggregationIntervalFromTarget","interval_ms","getAggregationInterval","groupByTime","getClosestMonth","getNextMonth","AGG_SUM","groupByMonthSum","getClosestWeek","getNextWeek","groupByWeekSum","getPointTimeFrame","getNextTimeFrame","groupBySum","getStatUnit","dp","alias","extendedStats","forEach","stat","kilojoules","middlePoint","getActivityMiddlePoint","start_latlng","summary_polyline","reduce","acc","val","intervalFn","nextIntervalFn","groupByFn","frame_value","grouped_series","frame_values","frame_ts","point_frame_ts","timestamp","ms_interval","startOf","week_ts","ElapsedTime","MovingTime","AveragePower","stravaActivityTypeOptions","props","queryTypes","onQueryTypeChange","selectedItem","queryModel","onChange","onActivityTypeChange","onLimitStateChange","Number","currentTarget","setState","onLimitChange","onActivityIdChange","state","render","className","width","labelWidth","tooltip","onBlur","AuthCodePattern","authOptions","OAuth","updateDatasource","k","secureJsonData","onOptionsChange","onCacheTTLChange","cacheTTL","onResetClientSecret","secureJsonFields","clientSecret","onResetRefreshToken","refreshToken","onAccessTokenChange","accessToken","onClientIDChange","clientID","onClientSecretChange","onRefreshTokenChange","onAuthCodeChange","onAuthTypeChange","isLocationContainsCode","test","isLocationContainsError","getConnectWithStravaHref","currentLocation","origin","pathname","authUrl","ConfigEditor","defaults","getDerivedStateFromProps","connectWithStravaHref","event","placeholder","disabled","variant","onClick","href","src","useAsyncFn","fn","deps","initialState","loading","mountedRef","lastCallId","isMounted","_a","set","_i","callId","prevState","getStyles","theme","athleteLabel","spacing","formInputHeight","border","radius","md","colors","bg2","athleteAvatar","athletePlaceholder","spinner","palette","dark4","isLoading","styles","imgClass","size","profile_medium","stravaQueryTypeOptions","description","stravaActivityStatOptions","AverageHeartRate","WeightedAveragePower","stravaActivityDataOptions","Graph","stravaSegmentDataOptions","stravaActivityGraphOptions","Cadence","stravaActivitySplitOptions","FORMAT_OPTIONS","TimeSeries","INTERVAL_OPTIONS","extendedStatsOptions","stravaStatsOptions","defaultQuery","templateUrl","setConfigEditor","setQueryEditor","datasource","onRunQuery","setAthlete","athleteLoading","fetchAuthenticatedAthlete","getActivitiesOptions","activitiesOptions","fetchActivitiesOptions","getSegmentsOptions","segmentsOptions","fetchSegmentsOptions","start_date_local","getVariables","getSelectedActivitySplit","getSelectedSingleActivityStat","getSelectedActivityOption","selectedActivity","onPropChange","prop","option","onChangeInternal","onFitToRangeChanged","onActivityChanged","undefined","onSegmentChanged","selectedSegmentEffort","onExtendedStatsChanged","isSearchable","isClearable","allowCustomValue","setAnnotationQueryCtrl","StravaAnnotationsQueryCtrl","setVariableQueryEditor"],"mappings":"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","file":"module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","module.exports = __WEBPACK_EXTERNAL_MODULE__4__;","/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { DataQuery, DataSourceJsonData, SelectableValue } from '@grafana/data';\n\nexport interface StravaJsonData extends DataSourceJsonData {\n  clientID: string;\n  stravaAuthType: StravaAuthType;\n  cacheTTL: string;\n}\n\nexport enum StravaAuthType {\n  OAuth = 'oauth',\n  RefreshToken = 'refresh_token',\n}\n\nexport interface StravaAthlete {\n  profile_medium: string;\n  firstname: string;\n  lastname: string;\n  measurement_preference: StravaMeasurementPreference;\n}\n\nexport interface StravaActivity {\n  id: number;\n  external_id: string;\n  athlete: MetaAthlete;\n  achievement_count: number;\n  average_cadence: number;\n  average_heartrate: number;\n  average_speed: number;\n  upload_id: number;\n  name: string;\n  distance: number;\n  moving_time: number;\n  elapsed_time: number;\n  total_elevation_gain: number;\n  elev_high: number;\n  elev_low: number;\n  type: ActivityType;\n  start_date: string;\n  start_date_local: string;\n  timezone: string;\n  start_latlng: LatLng;\n  end_latlng: LatLng;\n  kudos_count: number;\n  comment_count: number;\n  athlete_count: number;\n  photo_count: number;\n  total_photo_count: number;\n  map: PolylineMap;\n  trainer: boolean;\n  commute: boolean;\n  manual: boolean;\n  private: boolean;\n  flagged: boolean;\n  from_accepted_tag: boolean;\n  workout_type: number;\n  upload_id_str: string;\n  max_speed: number;\n  has_kudoed: boolean;\n  hide_from_home: boolean;\n  gear_id: string;\n  kilojoules: number;\n  max_heartrate: number;\n  average_watts: number;\n  device_watts: number;\n  max_watts: number;\n  weighted_average_watts: number;\n  display_hide_heartrate_option: boolean;\n  location_city: string | null;\n  location_country: string | null;\n  location_state: string | null;\n  gear: any;\n  splits_metric: any;\n  splits_standard: any;\n  segment_efforts: SegmentEffort[];\n}\n\nexport interface SegmentEffort {\n  id: number;\n  achievements: Achievement[];\n  average_heartrate: number;\n  average_watts: number;\n  distance: number;\n  elapsed_time: number;\n  end_index: number;\n  hidden: boolean;\n  max_heartrate: number;\n  moving_time: number;\n  name: string;\n  pr_rank?: number;\n  start_date: string;\n  start_date_local: string;\n  start_index: number;\n  segment: Segment;\n}\n\nexport interface Segment {\n  id: number;\n  activity_type: ActivityType;\n  athlete_segment_stats: AthleteSegmentStats;\n  average_grade: number;\n  city: string;\n  climb_category: number;\n  country: string;\n  distance: number;\n  elevation_high: number;\n  elevation_low: number;\n  start_latlng: LatLng;\n  end_latlng: LatLng;\n  hazardous: boolean;\n  maximum_grade: number;\n  name: string;\n  private: boolean;\n  starred: boolean;\n  xoms: XOMs;\n}\n\nexport interface AthleteSegmentStats {\n  effort_count: number;\n  pr_activity_id: number;\n  pr_date: string;\n  pr_elapsed_time: number;\n}\n\nexport interface XOMs {\n  overall: string;\n  kom: string;\n  qom: string;\n  destination: {\n    href: string;\n    name: string;\n    type: string;\n  };\n}\n\nexport interface Achievement {\n  rank: number;\n  type: string;\n  type_id: number;\n}\n\nexport type ActivityType =\n  | 'AlpineSki'\n  | 'BackcountrySki'\n  | 'Canoeing'\n  | 'Crossfit'\n  | 'EBikeRide'\n  | 'Elliptical'\n  | 'Golf'\n  | 'Handcycle'\n  | 'Hike'\n  | 'IceSkate'\n  | 'InlineSkate'\n  | 'Kayaking'\n  | 'Kitesurf'\n  | 'NordicSki'\n  | 'Ride'\n  | 'RockClimbing'\n  | 'RollerSki'\n  | 'Rowing'\n  | 'Run'\n  | 'Sail'\n  | 'Skateboard'\n  | 'Snowboard'\n  | 'Snowshoe'\n  | 'Soccer'\n  | 'StairStepper'\n  | 'StandUpPaddling'\n  | 'Surfing'\n  | 'Swim'\n  | 'Velomobile'\n  | 'VirtualRide'\n  | 'VirtualRun'\n  | 'Walk'\n  | 'WeightTraining'\n  | 'Wheelchair'\n  | 'Windsurf'\n  | 'Workout'\n  | 'Yoga';\n\nexport interface MetaAthlete {\n  id: number;\n  resource_state: number;\n}\n\nexport type LatLng = [number, number];\n\nexport interface PolylineMap {\n  id: string;\n  polyline: string;\n  summary_polyline: string;\n}\n\nexport enum StravaMeasurementPreference {\n  Meters = 'meters',\n  Feet = 'feet',\n}\n\nexport interface StravaSecureJsonData {\n  clientSecret: string;\n  authCode: string;\n  refreshToken: string;\n}\n\nexport interface StravaQuery extends DataQuery {\n  queryType: StravaQueryType;\n  activityStat: StravaActivityStat;\n  activityType: StravaActivityType;\n  format: StravaQueryFormat;\n  interval: StravaQueryInterval;\n  selectedActivity?: SelectableValue<number>;\n  activityId?: number;\n  activityGraph?: StravaActivityStream;\n  activityData?: string;\n  splitStat?: StravaSplitStat;\n  singleActivityStat?: string;\n  fitToTimeRange?: boolean;\n  extendedStats: string[];\n  segmentEffortId?: number;\n  selectedSegmentEffort?: SelectableValue<number>;\n  segmentData?: string;\n  segmentGraph?: StravaActivityStream;\n}\n\nexport enum StravaQueryFormat {\n  TimeSeries = 'time_series',\n  Table = 'table',\n  WorldMap = 'worldmap',\n  Heatmap = 'heatmap',\n}\n\nexport enum StravaQueryInterval {\n  No = 'no',\n  Auto = 'auto',\n  Hour = 'hour',\n  Day = 'day',\n  Week = 'week',\n  Month = 'month',\n}\n\nexport enum StravaQueryType {\n  Activities = 'Activities',\n  Activity = 'Activity',\n  SegmentEffort = 'SegmentEffort',\n}\n\nexport enum StravaActivityStat {\n  Distance = 'distance',\n  MovingTime = 'moving_time',\n  ElapsedTime = 'elapsed_time',\n  ElevationGain = 'total_elevation_gain',\n  AveragePower = 'average_watts',\n  WeightedAveragePower = 'weighted_average_watts',\n  AverageHeartRate = 'average_heartrate',\n}\n\nexport type StravaActivityType = string | null;\n\nexport enum StravaActivityData {\n  Graph = 'graph',\n  Splits = 'splits',\n  Stats = 'stats',\n  Geomap = 'geomap',\n  Segments = 'segments',\n}\n\nexport enum StravaSplitStat {\n  Pace = 'pace',\n  HeartRate = 'average_heartrate',\n  Speed = 'average_speed',\n  MovingTime = 'moving_time',\n  ElapsedTime = 'elapsed_time',\n}\n\nexport enum StravaActivityStream {\n  Distance = 'distance',\n  HeartRate = 'heartrate',\n  Altitude = 'altitude',\n  Cadence = 'cadence',\n  Velocity = 'velocity_smooth',\n  // Special type for pace which actually calculated from velocity\n  Pace = 'pace',\n  Watts = 'watts',\n  WattsCalc = 'watts_calc',\n  Temp = 'temp',\n  Moving = 'moving',\n  GradeSmooth = 'grade_smooth',\n  GradeAdjustedDistance = 'grade_adjusted_distance',\n  LatLng = 'latlng',\n}\n\nexport type StreamType =\n  | 'heartrate'\n  | 'altitude'\n  | 'distance'\n  | 'cadence'\n  | 'velocity_smooth'\n  | 'latlng'\n  | 'watts'\n  | 'watts_calc'\n  | 'temp'\n  | 'moving'\n  | 'grade_smooth'\n  | 'grade_adjusted_distance'\n  | 'time'\n  | 'timer_time';\n\nexport interface VariableQuery {\n  queryType: VariableQueryTypes;\n  activityType: string;\n  limit: number;\n  activityId: string;\n}\n\nexport enum VariableQueryTypes {\n  Activity = 'activity',\n  SegmentEffort = 'segment_effort',\n}\n\nexport const TopAchievementStat = 'top_achievement';\n\nexport const GRAPH_SMOOTH_WINDOW = 20;\n","import { getBackendSrv } from '@grafana/runtime';\nimport { Segment, StravaActivity, StravaAthlete, StreamType } from 'types';\n\nexport default class StravaApi {\n  datasourceId: number;\n  backendAPIUrl: string;\n  backendAuthUrl: string;\n  apiUrl: string;\n  promises: any;\n\n  constructor(datasourceId: number) {\n    this.datasourceId = datasourceId;\n    this.backendAPIUrl = `/api/datasources/${this.datasourceId}/resources/strava-api`;\n    this.backendAuthUrl = `/api/datasources/${this.datasourceId}/resources/auth`;\n\n    // this.apiUrl = url;\n    this.promises = {};\n    this.apiUrl = '';\n  }\n\n  async getAuthenticatedAthlete(): Promise<StravaAthlete> {\n    return await this.tsdbRequest('athlete');\n  }\n\n  async getActivities(params?: any): Promise<StravaActivity[]> {\n    return await this.requestWithPagination('athlete/activities', params);\n  }\n\n  async getActivity(params?: any) {\n    const { id, include_all_efforts } = params;\n    return await this.tsdbRequest(`/activities/${id}`, { include_all_efforts });\n  }\n\n  async getActivityStreams(params: { id: number | string; streamType: StreamType }) {\n    const { id, streamType } = params;\n    return await this.tsdbRequest(`/activities/${id}/streams`, {\n      key_by_type: true,\n      keys: `${streamType},time`,\n    });\n  }\n\n  async getSegment(id: number): Promise<Segment> {\n    return await this.tsdbRequest(`/segments/${id}`);\n  }\n\n  async requestWithPagination(url: string, params?: any) {\n    let data: any[] = [];\n    let chunk = [];\n    let page = 1;\n    const limit = params && params.limit;\n    let per_page = (params && params.per_page) || 200;\n    if (limit) {\n      per_page = Math.min(per_page, limit);\n    }\n\n    while (!(chunk.length === 0 && page !== 1) && !(limit && data.length >= limit)) {\n      params = {\n        ...params,\n        per_page,\n        page,\n      };\n      try {\n        // chunk = await this.request(url, params);\n        chunk = await this.tsdbRequest(url, params);\n      } catch (error) {\n        throw error;\n      }\n      data = data.concat(chunk);\n      page++;\n    }\n    return data;\n  }\n\n  async exchangeToken(authCode: any) {\n    return await this.tsdbAuthRequest({ authCode });\n  }\n\n  async resetAccessToken() {\n    try {\n      const response = await getBackendSrv().get(`/api/datasources/${this.datasourceId}/resources/reset-access-token`);\n      return this.handleTsdbResponse(response);\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  }\n\n  async request(url: string, params?: any) {\n    return this.proxyfy(this._request, '_request', this)(url, params);\n  }\n\n  async _request(url: string, params?: any) {\n    try {\n      const response = await getBackendSrv().datasourceRequest({\n        url: `${this.apiUrl}/strava/${url}`,\n        method: 'GET',\n        params,\n      });\n      return response.data;\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  }\n\n  async tsdbRequest(endpoint: string, params?: any) {\n    return this.proxyfy(this._tsdbRequest, '_tsdbRequest', this)(endpoint, params);\n  }\n\n  async _tsdbRequest(endpoint: string, params?: any) {\n    try {\n      const response = await getBackendSrv().datasourceRequest({\n        url: this.backendAPIUrl,\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        data: {\n          datasourceId: this.datasourceId,\n          endpoint,\n          params,\n        },\n      });\n      return this.handleTsdbResponse(response);\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  }\n\n  async tsdbAuthRequest(params?: any) {\n    const queryType = 'stravaAuth';\n\n    try {\n      const response = await getBackendSrv().datasourceRequest({\n        url: this.backendAuthUrl,\n        method: 'POST',\n        data: params,\n      });\n      return this.handleTsdbResponse(response, queryType);\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  }\n\n  handleTsdbResponse(response: any, queryType = 'stravaAPI') {\n    if (response && (response.status >= 400 || response.status < 0)) {\n      throw Error(response.statusText);\n    }\n\n    if (!response || !response.data || !response.data.result) {\n      return [];\n    }\n\n    const responseData = response.data.result;\n    if (responseData.error) {\n      throw Error(responseData.error);\n    }\n\n    return responseData;\n  }\n\n  proxyfy(func: any, funcName: any, funcScope: any) {\n    if (!this.promises[funcName]) {\n      this.promises[funcName] = {};\n    }\n    const promiseKeeper = this.promises[funcName];\n    return callOnce(func, promiseKeeper, funcScope);\n  }\n}\n\n/**\n * Wrap request to prevent multiple calls\n * with same params when waiting for result.\n */\nfunction callOnce(func: any, promiseKeeper: any, funcScope: any): (...args: any[]) => any {\n  return function () {\n    var hash = getRequestHash(arguments);\n    if (!promiseKeeper[hash]) {\n      promiseKeeper[hash] = Promise.resolve(\n        func.apply(funcScope, arguments).then((result: any) => {\n          promiseKeeper[hash] = null;\n          return result;\n        })\n      );\n    }\n    return promiseKeeper[hash];\n  };\n}\n\nfunction getRequestHash(args: any) {\n  const argsJson = JSON.stringify(args);\n  return getHash(argsJson);\n}\n\nfunction getHash(srt: string) {\n  var hash = 0,\n    i,\n    chr,\n    len;\n  if (srt.length !== 0) {\n    for (i = 0, len = srt.length; i < len; i++) {\n      chr = srt.charCodeAt(i);\n      hash = (hash << 5) - hash + chr;\n      hash |= 0; // Convert to 32bit integer\n    }\n  }\n  return hash;\n}\n","/**\n * This file contains code from google-polyline\n * https://github.com/jhermsmeier/node-google-polyline\n *\n * https://github.com/jhermsmeier/node-google-polyline/blob/master/lib/decode.js\n */\n\nconst PRECISION = 1e5;\n\nexport function decode(value: any) {\n  var points: any[] = [];\n  var lat = 0;\n  var lon = 0;\n\n  integers(value, function (x: number, y: number) {\n    lat += x;\n    lon += y;\n    points.push([lat / PRECISION, lon / PRECISION]);\n  });\n\n  return points;\n}\n\nexport function sign(value: any) {\n  return value & 1 ? ~(value >>> 1) : value >>> 1;\n}\n\nexport function integers(value: any, callback: any) {\n  var values = 0;\n  var x = 0;\n  var y = 0;\n\n  var byte = 0;\n  var current = 0;\n  var bits = 0;\n\n  for (var i = 0; i < value.length; i++) {\n    byte = value.charCodeAt(i) - 63;\n    current = current | ((byte & 0x1f) << bits);\n    bits = bits + 5;\n\n    if (byte < 0x20) {\n      if (++values & 1) {\n        x = sign(current);\n      } else {\n        y = sign(current);\n        callback(x, y);\n      }\n      current = 0;\n      bits = 0;\n    }\n  }\n\n  return values;\n}\n\nexport default {\n  decode,\n};\n","import { DisplayValue } from '@grafana/data';\nimport { GRAPH_SMOOTH_WINDOW, StravaMeasurementPreference } from 'types';\n\nexport function metersToFeet(value: number): number {\n  return value / 0.3048;\n}\n\nexport function metersToMiles(value: number): number {\n  return value / 1609.344;\n}\n\nexport function paceToMiles(value: number): number {\n  return (value * 1609.344) / 1000;\n}\n\nexport function velocityToPace(mps: number): number {\n  if (mps === 0) {\n    return 0;\n  }\n  const pace = Math.fround(1000 / mps);\n  // Limit pace to 10 min/km to avoid spikes on graph (pace is a reversed speed)\n  return Math.min(10 * 60, pace);\n}\n\nexport function velocityToSpeed(mps: number): number {\n  // m/s to km/h\n  return mps * 3.6;\n}\n\nexport function velocityDataToPace(data: Array<number | null>, mp: StravaMeasurementPreference): Array<number | null> {\n  for (let i = 0; i < data.length; i++) {\n    // m/s to min/km\n    const point = data[i];\n    if (point != null) {\n      const paceMinkm = velocityToPace(point);\n      data[i] = mp === StravaMeasurementPreference.Feet ? paceToMiles(paceMinkm) : paceMinkm;\n    }\n  }\n  return data;\n}\n\nexport function velocityDataToSpeed(data: Array<number | null>, mp: StravaMeasurementPreference): Array<number | null> {\n  for (let i = 0; i < data.length; i++) {\n    // m/s to km/h\n    const point = data[i];\n    if (point != null) {\n      const speedKmph = velocityToSpeed(point);\n      data[i] = mp === StravaMeasurementPreference.Feet ? metersToMiles(speedKmph * 1000) : speedKmph;\n    }\n  }\n  return data;\n}\n\nexport function metersDataToFeet(data: Array<number | null>, mp: StravaMeasurementPreference): Array<number | null> {\n  for (let i = 0; i < data.length; i++) {\n    const point = data[i];\n    if (point != null) {\n      data[i] = mp === StravaMeasurementPreference.Feet ? metersToFeet(point) : point;\n    }\n  }\n  return data;\n}\n\nexport function smoothVelocityData(data: Array<number | null>): Array<number | null> {\n  // It's not possible to calculate MA if n greater than number of points\n  const n = Math.min(GRAPH_SMOOTH_WINDOW, data.length);\n\n  const sma = [];\n  let w_sum = 0;\n  let w_count = 0;\n  let point: number | null = null;\n\n  // Initial window\n  for (let i = n; i > 0; i--) {\n    point = data[n - i];\n    if (point != null) {\n      w_sum += point;\n      w_count++;\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    sma.push(w_sum / w_count);\n  }\n\n  for (let i = n; i < data.length; i++) {\n    w_sum = 0;\n    w_count = 0;\n    for (let j = 0; j < n; j++) {\n      point = data[i - j];\n      if (point != null) {\n        w_sum += point;\n        w_count++;\n      }\n    }\n    sma.push(w_sum / w_count);\n  }\n  return sma;\n}\n\nexport const paceDisplayProcessor = (value: any): DisplayValue => {\n  let text = '';\n  const displayValue: DisplayValue = {\n    numeric: value,\n    text,\n  };\n\n  if (value) {\n    const minuntes = Math.floor(value / 60);\n    const seconds = Math.round(value - minuntes * 60);\n    text = `${minuntes}:${seconds}`;\n    displayValue.text = text;\n    displayValue.suffix = ' /km';\n  }\n  return displayValue;\n};\n","import {\n  DataQueryRequest,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  dateTime,\n  TimeRange,\n  TimeSeriesPoints,\n  TimeSeriesValue,\n  TIME_SERIES_TIME_FIELD_NAME,\n  FieldType,\n  MutableField,\n  ArrayVector,\n  MutableDataFrame,\n  TIME_SERIES_VALUE_FIELD_NAME,\n  MetricFindValue,\n  DataFrame,\n} from '@grafana/data';\nimport StravaApi from './stravaApi';\nimport polyline from './polyline';\nimport {\n  StravaActivity,\n  StravaActivityStat,\n  StravaJsonData,\n  StravaQuery,\n  StravaQueryFormat,\n  StravaActivityType,\n  StravaQueryInterval,\n  StravaQueryType,\n  StravaActivityStream,\n  StravaActivityData,\n  StravaSplitStat,\n  VariableQuery,\n  StravaAuthType,\n  StravaAthlete,\n  StravaMeasurementPreference,\n  TopAchievementStat,\n  VariableQueryTypes,\n  SegmentEffort,\n} from './types';\nimport {\n  smoothVelocityData,\n  velocityDataToPace,\n  velocityDataToSpeed,\n  velocityToPace,\n  velocityToSpeed,\n  metersToFeet,\n  metersToMiles,\n  paceToMiles,\n  metersDataToFeet,\n} from 'utils';\nimport { getTemplateSrv } from '@grafana/runtime';\n\nconst DEFAULT_RANGE = {\n  from: dateTime(),\n  to: dateTime(),\n  raw: {\n    from: 'now',\n    to: 'now',\n  },\n};\n\nexport const DEFAULT_LIMIT = 100;\n// 5 min\nexport const DEFAULT_ACTIVITIES_CACHE_INTERVAL = 5 * 60;\n\nexport default class StravaDatasource extends DataSourceApi<StravaQuery, StravaJsonData> {\n  type: any;\n  datasourceId: number;\n  stravaAuthType: StravaAuthType;\n  apiUrl: string;\n  stravaApi: StravaApi;\n  activities: any[];\n  athlete?: StravaAthlete;\n  measurementPreference: StravaMeasurementPreference;\n\n  constructor(instanceSettings: DataSourceInstanceSettings<StravaJsonData>) {\n    super(instanceSettings);\n    this.type = 'strava';\n    this.datasourceId = instanceSettings.id;\n    this.apiUrl = instanceSettings.url!;\n    this.stravaApi = new StravaApi(this.datasourceId);\n    this.activities = [];\n    this.stravaAuthType = instanceSettings.jsonData.stravaAuthType;\n    this.measurementPreference = StravaMeasurementPreference.Meters;\n  }\n\n  async query(options: DataQueryRequest<StravaQuery>) {\n    const data: any[] = [];\n    let activities: StravaActivity[] = [];\n\n    if (!this.athlete) {\n      this.athlete = await this.stravaApi.getAuthenticatedAthlete();\n      this.measurementPreference = this.athlete?.measurement_preference || StravaMeasurementPreference.Meters;\n    }\n\n    let queryActivities = options.targets.some((t) => t.queryType === StravaQueryType.Activities);\n\n    if (queryActivities) {\n      let before = options.range?.to.unix();\n      let after = options.range?.from.unix();\n      // Round time to cache interval in order to hit cache\n      before = Math.floor(before / DEFAULT_ACTIVITIES_CACHE_INTERVAL) * DEFAULT_ACTIVITIES_CACHE_INTERVAL;\n      after = Math.floor(after / DEFAULT_ACTIVITIES_CACHE_INTERVAL) * DEFAULT_ACTIVITIES_CACHE_INTERVAL;\n      activities = await this.stravaApi.getActivities({ before, after });\n    }\n\n    for (const target of options.targets) {\n      if (target.hide) {\n        continue;\n      }\n\n      if (target.queryType === StravaQueryType.Activities) {\n        const filteredActivities = this.filterActivities(activities, target.activityType);\n        switch (target.format) {\n          case StravaQueryFormat.Table:\n            const tableData = this.transformActivitiesToTable(filteredActivities, target);\n            data.push(tableData);\n            break;\n          case StravaQueryFormat.WorldMap:\n            const geomapData = this.transformActivitiesToGeomap(filteredActivities, target);\n            data.push(geomapData);\n            break;\n          case StravaQueryFormat.Heatmap:\n            const heatmapData = this.transformActivitiesToHeatmap(filteredActivities, target);\n            data.push(heatmapData);\n            break;\n          default:\n            const tsData = this.transformActivitiesToTimeseries(\n              filteredActivities,\n              target,\n              options.range || DEFAULT_RANGE\n            );\n            data.push(tsData);\n            break;\n        }\n      } else if (target.queryType === StravaQueryType.Activity) {\n        const activityData = await this.queryActivity(options, target);\n        data.push(activityData);\n      } else if (target.queryType === StravaQueryType.SegmentEffort) {\n        const segmentData = await this.queryActivitySegment(options, target);\n        data.push(segmentData);\n      }\n    }\n\n    return { data };\n  }\n\n  async queryActivity(options: DataQueryRequest<StravaQuery>, target: StravaQuery) {\n    const activityId = getTemplateSrv().replace(target.activityId?.toString());\n    const activity = await this.stravaApi.getActivity({\n      id: activityId,\n      include_all_efforts: true,\n    });\n\n    if (target.activityData === StravaActivityData.Stats) {\n      return this.queryActivityStats(activity, target, options);\n    }\n\n    if (target.activityData === StravaActivityData.Splits) {\n      return this.queryActivitySplits(activity, target, options);\n    }\n\n    if (target.activityData === StravaActivityData.Geomap) {\n      return this.queryActivityGeomap(activity, target, options);\n    }\n\n    if (target.activityData === StravaActivityData.Segments) {\n      return this.queryActivitySegments(activity, target, options);\n    }\n\n    let activityStream = target.activityGraph;\n    if (activityStream === StravaActivityStream.Pace) {\n      activityStream = StravaActivityStream.Velocity;\n    }\n\n    if (!activityStream) {\n      return null;\n    }\n\n    const streams = await this.stravaApi.getActivityStreams({\n      id: activityId,\n      streamType: activityStream,\n    });\n\n    const timeFiled: MutableField<number> = {\n      name: TIME_SERIES_TIME_FIELD_NAME,\n      type: FieldType.time,\n      config: {\n        custom: {},\n      },\n      values: new ArrayVector(),\n    };\n\n    const valueFiled: MutableField<number | null> = {\n      name: activityStream,\n      type: FieldType.number,\n      config: {\n        custom: {},\n      },\n      values: new ArrayVector(),\n    };\n\n    const frame = new MutableDataFrame({\n      name: activity.name,\n      refId: target.refId,\n      fields: [],\n    });\n\n    const stream = streams[activityStream];\n    if (!stream) {\n      return frame;\n    }\n\n    let ts = dateTime(activity.start_date).unix();\n    if (target.fitToTimeRange) {\n      ts = options.range.from.unix();\n    }\n\n    // Data comes as a kind of sparce array. Time stream contains offset of data\n    // points, for example:\n    // heartrate: [70,81,82,81,99,96,97,98,99]\n    // time:      [0, 4, 5, 6, 20,21,22,23,24]\n    // So last value of the time stream is a highest index in data array\n    const timeStream = streams.time;\n    const streamLength: number = streams.time?.data[streams.time?.data.length - 1] + 1;\n    let streamValues = new Array<number | null>(streamLength).fill(null);\n\n    for (let i = 0; i < streamLength; i++) {\n      timeFiled.values.add(ts * 1000);\n      streamValues[timeStream.data[i]] = stream.data[i];\n      ts++;\n    }\n\n    if (target.activityGraph === StravaActivityStream.Pace) {\n      if (activity.type === 'Run') {\n        valueFiled.name = 'pace';\n        valueFiled.config.unit = 'dthms';\n        streamValues = velocityDataToPace(streamValues, this.measurementPreference);\n      } else {\n        valueFiled.name = 'speed';\n        valueFiled.config.unit = getPreferredSpeedUnit(this.measurementPreference);\n        streamValues = velocityDataToSpeed(streamValues, this.measurementPreference);\n      }\n    }\n\n    if (target.activityGraph === StravaActivityStream.Velocity) {\n      valueFiled.name = 'speed';\n      valueFiled.config.unit = getPreferredSpeedUnit(this.measurementPreference);\n      streamValues = velocityDataToSpeed(streamValues, this.measurementPreference);\n    }\n\n    if (target.activityGraph === StravaActivityStream.Altitude) {\n      valueFiled.config.unit = getPreferredLenghtUnit(this.measurementPreference);\n      streamValues = metersDataToFeet(streamValues, this.measurementPreference);\n    }\n\n    // Smooth data\n    if (\n      activityStream === StravaActivityStream.Velocity ||\n      activityStream === StravaActivityStream.HeartRate ||\n      activityStream === StravaActivityStream.GradeSmooth ||\n      activityStream === StravaActivityStream.WattsCalc ||\n      activityStream === StravaActivityStream.Watts\n    ) {\n      streamValues = smoothVelocityData(streamValues);\n    }\n\n    valueFiled.values = new ArrayVector(streamValues);\n    frame.addField(timeFiled);\n    frame.addField(valueFiled);\n\n    return frame;\n  }\n\n  async queryActivitySegment(options: DataQueryRequest<StravaQuery>, target: StravaQuery) {\n    const activityId = getTemplateSrv().replace(target.activityId?.toString());\n    const segmentEffortId = getTemplateSrv().replace(target.segmentEffortId?.toString());\n    const activity: StravaActivity = await this.stravaApi.getActivity({\n      id: activityId,\n      include_all_efforts: true,\n    });\n\n    const segmentEffort = activity.segment_efforts?.find((se) => se.id.toString() === segmentEffortId);\n    if (!segmentEffort) {\n      return [];\n    }\n\n    if (target.activityData === StravaActivityData.Geomap) {\n      return this.querySegmentGeomap(activity, segmentEffort, target, options);\n    }\n\n    let segmentStream = target.segmentGraph;\n    if (segmentStream === StravaActivityStream.Pace) {\n      segmentStream = StravaActivityStream.Velocity;\n    }\n\n    if (!segmentStream) {\n      return null;\n    }\n\n    const streams = await this.stravaApi.getActivityStreams({\n      id: activityId,\n      streamType: segmentStream,\n    });\n\n    const timeFiled: MutableField<number> = {\n      name: TIME_SERIES_TIME_FIELD_NAME,\n      type: FieldType.time,\n      config: {\n        custom: {},\n      },\n      values: new ArrayVector(),\n    };\n\n    const valueFiled: MutableField<number | null> = {\n      name: segmentStream,\n      type: FieldType.number,\n      config: {\n        custom: {},\n      },\n      values: new ArrayVector(),\n    };\n\n    const frame = new MutableDataFrame({\n      name: activity.name,\n      refId: target.refId,\n      fields: [],\n    });\n\n    const stream = streams[segmentStream];\n    if (!stream) {\n      return frame;\n    }\n\n    // Data comes as a kind of sparce array. Time stream contains offset of data\n    // points, for example:\n    // heartrate: [70,81,82,81,99,96,97,98,99]\n    // time:      [0, 4, 5, 6, 20,21,22,23,24]\n    // So last value of the time stream is a highest index in data array\n    const timeStream = streams.time;\n    const streamLength: number = timeStream.data[segmentEffort.end_index] - timeStream.data[segmentEffort.start_index];\n    let streamValues = new Array<number | null>(streamLength).fill(null);\n\n    const firstTsIndex = timeStream.data[segmentEffort.start_index];\n    let ts = dateTime(activity.start_date).unix() + firstTsIndex;\n    if (target.fitToTimeRange) {\n      ts = options.range.from.unix();\n    }\n    const startIdx = segmentEffort.start_index;\n    for (let i = startIdx; i < startIdx + streamLength; i++) {\n      timeFiled.values.add(ts * 1000);\n      ts++;\n    }\n    for (let i = startIdx; i < segmentEffort.end_index; i++) {\n      streamValues[timeStream.data[i] - firstTsIndex] = stream.data[i];\n    }\n\n    if (target.activityGraph === StravaActivityStream.Pace) {\n      if (activity.type === 'Run') {\n        valueFiled.name = 'pace';\n        valueFiled.config.unit = 'dthms';\n        streamValues = velocityDataToPace(streamValues, this.measurementPreference);\n      } else {\n        valueFiled.name = 'speed';\n        valueFiled.config.unit = getPreferredSpeedUnit(this.measurementPreference);\n        streamValues = velocityDataToSpeed(streamValues, this.measurementPreference);\n      }\n    }\n\n    if (target.activityGraph === StravaActivityStream.Velocity) {\n      valueFiled.name = 'speed';\n      valueFiled.config.unit = getPreferredSpeedUnit(this.measurementPreference);\n      streamValues = velocityDataToSpeed(streamValues, this.measurementPreference);\n    }\n\n    if (target.activityGraph === StravaActivityStream.Altitude) {\n      valueFiled.config.unit = getPreferredLenghtUnit(this.measurementPreference);\n      streamValues = metersDataToFeet(streamValues, this.measurementPreference);\n    }\n\n    // Smooth data\n    if (\n      segmentStream === StravaActivityStream.Velocity ||\n      segmentStream === StravaActivityStream.HeartRate ||\n      segmentStream === StravaActivityStream.GradeSmooth ||\n      segmentStream === StravaActivityStream.WattsCalc ||\n      segmentStream === StravaActivityStream.Watts\n    ) {\n      streamValues = smoothVelocityData(streamValues);\n    }\n\n    valueFiled.values = new ArrayVector(streamValues);\n    frame.addField(timeFiled);\n    frame.addField(valueFiled);\n\n    return frame;\n  }\n\n  queryActivitySplits(activity: StravaActivity, target: StravaQuery, options: DataQueryRequest<StravaQuery>) {\n    const timeFiled: MutableField<number> = {\n      name: TIME_SERIES_TIME_FIELD_NAME,\n      type: FieldType.time,\n      config: {\n        custom: {},\n      },\n      values: new ArrayVector(),\n    };\n\n    const splitStat = target.splitStat || '';\n\n    const valueFiled: MutableField<number> = {\n      name: splitStat || TIME_SERIES_VALUE_FIELD_NAME,\n      type: FieldType.number,\n      config: {},\n      values: new ArrayVector(),\n    };\n\n    const frame = new MutableDataFrame({\n      name: activity.name,\n      refId: target.refId,\n      fields: [],\n    });\n\n    let ts = dateTime(activity.start_date).unix();\n    if (target.fitToTimeRange) {\n      ts = options.range.from.unix();\n    }\n\n    const isMetric = this.measurementPreference === StravaMeasurementPreference.Meters;\n    const splits: any[] = isMetric ? activity.splits_metric : activity.splits_standard;\n    for (let i = 0; i < splits.length; i++) {\n      const split = splits[i];\n      timeFiled.values.add(ts * 1000);\n      let value = split[splitStat];\n      if (splitStat === StravaSplitStat.Speed) {\n        value = velocityToSpeed(value);\n      } else if (splitStat === StravaSplitStat.Pace) {\n        if (activity.type === 'Run') {\n          valueFiled.config.unit = 'dthms';\n          value = getPreferredPace(split[StravaSplitStat.Speed], this.measurementPreference);\n        } else {\n          valueFiled.config.unit = getPreferredSpeedUnit(this.measurementPreference);\n          value = getPreferredSpeed(split[StravaSplitStat.Speed], this.measurementPreference);\n        }\n      }\n      valueFiled.values.add(value);\n      ts += split.elapsed_time;\n    }\n\n    frame.addField(timeFiled);\n    frame.addField(valueFiled);\n\n    return frame;\n  }\n\n  queryActivityStats(activity: StravaActivity, target: StravaQuery, options: DataQueryRequest<StravaQuery>) {\n    const stats = target.singleActivityStat || 'name';\n    const valueFiled: MutableField<number | null> = {\n      name: stats,\n      type: FieldType.other,\n      config: {},\n      values: new ArrayVector(),\n    };\n    let activityStats = (activity as any)[stats];\n    if (stats.startsWith('gear_')) {\n      const gearStatsName = stats.substring('gear_'.length);\n      activityStats = activity.gear ? activity.gear[gearStatsName] : null;\n    }\n    if (stats === 'pace') {\n      if (activity.type === 'Run') {\n        valueFiled.config.unit = 'dthms';\n        activityStats = getPreferredPace(activity.average_speed, this.measurementPreference);\n      } else {\n        valueFiled.config.unit = getPreferredSpeedUnit(this.measurementPreference);\n        activityStats = getPreferredSpeed(activity.average_speed, this.measurementPreference);\n      }\n    }\n    if (stats === TopAchievementStat) {\n      let topAchievement = null;\n      for (const effort of activity.segment_efforts) {\n        if (effort.achievements) {\n          for (const achievement of effort.achievements) {\n            if (topAchievement === null || achievement.rank < topAchievement) {\n              topAchievement = achievement.rank;\n            }\n          }\n        }\n      }\n      activityStats = topAchievement;\n    }\n    if (stats === StravaActivityStat.Distance) {\n      valueFiled.config.unit = this.measurementPreference === StravaMeasurementPreference.Feet ? 'lengthmi' : 'lengthm';\n      activityStats = getPreferredDistance(activity.distance, this.measurementPreference);\n    }\n    if (stats === StravaActivityStat.ElevationGain) {\n      valueFiled.config.unit = this.measurementPreference === StravaMeasurementPreference.Feet ? 'lengthft' : 'lengthm';\n      activityStats = getPreferredLenght(activity.total_elevation_gain, this.measurementPreference);\n    }\n\n    const frame = new MutableDataFrame({\n      name: activity.name,\n      refId: target.refId,\n      fields: [{ name: TIME_SERIES_TIME_FIELD_NAME, type: FieldType.time }, valueFiled],\n    });\n\n    frame.add({\n      time: dateTime(activity.start_date),\n      [stats]: activityStats,\n    });\n\n    return frame;\n  }\n\n  async queryActivitySegments(activity: StravaActivity, target: StravaQuery, options: DataQueryRequest<StravaQuery>) {\n    const distanceUnit = this.measurementPreference === StravaMeasurementPreference.Feet ? 'lengthmi' : 'lengthm';\n    const lenghtUnit = this.measurementPreference === StravaMeasurementPreference.Feet ? 'lengthft' : 'lengthm';\n\n    const frame = new MutableDataFrame({\n      refId: target.refId,\n      fields: [\n        { name: 'name', type: FieldType.string },\n        { name: 'achievements', type: FieldType.number, config: { unit: '', decimals: 0 } },\n        { name: 'time', type: FieldType.number, config: { unit: 'dthms' } },\n        { name: 'pace', type: FieldType.number, config: { unit: '' } },\n        { name: 'heart rate', type: FieldType.number, config: { unit: 'bpm', decimals: 0 } },\n        { name: 'power', type: FieldType.number, config: { unit: 'watt' } },\n        { name: 'distance', type: FieldType.number, config: { unit: distanceUnit } },\n        { name: 'elevation gain', type: FieldType.number, config: { unit: lenghtUnit, decimals: 0 } },\n        { name: 'grade', type: FieldType.number, config: { unit: 'percent', decimals: 1 } },\n        { name: 'PR', type: FieldType.string, config: { unit: 'dthms' } },\n        { name: 'KOM', type: FieldType.string },\n        { name: 'id', type: FieldType.string, config: { unit: 'none', custom: { hidden: true } } },\n        { name: 'segment_id', type: FieldType.string, config: { unit: 'none', custom: { hidden: true } } },\n        { name: 'time_from', type: FieldType.number, config: { unit: 'none', decimals: 0, custom: { hidden: true } } },\n        { name: 'time_to', type: FieldType.number, config: { unit: 'none', decimals: 0, custom: { hidden: true } } },\n      ],\n    });\n\n    const segments = activity.segment_efforts;\n    if (segments?.length > 0) {\n      let detailedSegments = await Promise.all(segments.map((s) => this.stravaApi.getSegment(s.segment.id)));\n\n      for (let i = 0; i < segments.length; i++) {\n        const effort = segments[i];\n        const segment = detailedSegments.find((s) => s.id === effort.segment.id);\n\n        const paceFieldIdx = frame.fields.findIndex((field) => field.name === 'pace');\n        let pace: number;\n        if (effort.segment.activity_type === 'Run') {\n          frame.fields[paceFieldIdx].config.unit = 'dthms';\n          pace = getPreferredPace(effort.distance / effort.moving_time, this.measurementPreference);\n        } else {\n          frame.fields[paceFieldIdx].config.unit = getPreferredSpeedUnit(this.measurementPreference);\n          pace = getPreferredSpeed(effort.distance / effort.moving_time, this.measurementPreference);\n        }\n\n        const dataRow: any = {\n          name: effort.name,\n          achievements: effort.pr_rank,\n          time: effort.moving_time,\n          pace: pace,\n          'heart rate': effort.average_heartrate,\n          power: effort.average_watts,\n          distance: getPreferredDistance(effort.distance, this.measurementPreference),\n          'elevation gain': getPreferredLenght(\n            effort.segment.elevation_high - effort.segment.elevation_low,\n            this.measurementPreference\n          ),\n          grade: effort.segment.average_grade,\n          PR: segment?.athlete_segment_stats?.pr_elapsed_time,\n          KOM: segment?.xoms?.overall,\n          id: effort.id,\n          segment_id: effort.segment.id,\n          time_from: dateTime(effort.start_date).unix() * 1000,\n          time_to: (dateTime(effort.start_date).unix() + effort.elapsed_time) * 1000,\n        };\n\n        frame.add(dataRow);\n      }\n    }\n\n    return frame;\n  }\n\n  async queryActivityGeomap(activity: any, target: StravaQuery, options: DataQueryRequest<StravaQuery>) {\n    const frame = new MutableDataFrame({\n      name: activity.name,\n      refId: target.refId,\n      fields: [\n        { name: TIME_SERIES_VALUE_FIELD_NAME, type: FieldType.number },\n        { name: 'latitude', type: FieldType.number },\n        { name: 'longitude', type: FieldType.number },\n      ],\n    });\n\n    let points: Array<[number, number]> = [];\n    const summaryPolyline = activity?.map?.polyline;\n    points = polyline.decode(summaryPolyline);\n\n    try {\n      const streams = await this.stravaApi.getActivityStreams({\n        id: activity.id,\n        streamType: StravaActivityStream.LatLng,\n      });\n      points = streams[StravaActivityStream.LatLng].data;\n      let startTs = dateTime(activity.start_date).unix();\n      const timeticks = streams.time?.data;\n      if (!timeticks) {\n        throw new Error('Time field not found');\n      }\n      frame.addField({ name: TIME_SERIES_TIME_FIELD_NAME, type: FieldType.time });\n      for (let i = 0; i < points.length; i++) {\n        frame.add({\n          latitude: points[i][0],\n          longitude: points[i][1],\n          [TIME_SERIES_VALUE_FIELD_NAME]: 1,\n          [TIME_SERIES_TIME_FIELD_NAME]: (startTs + timeticks[i]) * 1000,\n        });\n      }\n    } catch (error) {\n      console.log('Cannot fetch geo points from activity stream, switching to polyline.');\n      for (let i = 0; i < points.length; i++) {\n        frame.add({\n          latitude: points[i][0],\n          longitude: points[i][1],\n          [TIME_SERIES_VALUE_FIELD_NAME]: 1,\n        });\n      }\n    }\n\n    return frame;\n  }\n\n  async querySegmentGeomap(\n    activity: StravaActivity,\n    segmentEffort: SegmentEffort,\n    target: StravaQuery,\n    options: DataQueryRequest<StravaQuery>\n  ) {\n    const frame = new MutableDataFrame({\n      name: activity.name,\n      refId: target.refId,\n      fields: [\n        { name: TIME_SERIES_VALUE_FIELD_NAME, type: FieldType.number },\n        { name: 'latitude', type: FieldType.number },\n        { name: 'longitude', type: FieldType.number },\n      ],\n    });\n\n    if (!segmentEffort) {\n      return frame;\n    }\n\n    let points: Array<[number, number]> = [];\n\n    try {\n      const streams = await this.stravaApi.getActivityStreams({\n        id: activity.id,\n        streamType: StravaActivityStream.LatLng,\n      });\n      points = streams[StravaActivityStream.LatLng].data;\n      let startTs = dateTime(activity.start_date).unix();\n      const timeticks = streams.time?.data;\n      if (!timeticks) {\n        throw new Error('Time field not found');\n      }\n      frame.addField({ name: TIME_SERIES_TIME_FIELD_NAME, type: FieldType.time });\n      for (let i = segmentEffort.start_index; i < segmentEffort.end_index; i++) {\n        frame.add({\n          latitude: points[i][0],\n          longitude: points[i][1],\n          [TIME_SERIES_VALUE_FIELD_NAME]: 1,\n          [TIME_SERIES_TIME_FIELD_NAME]: (startTs + timeticks[i]) * 1000,\n        });\n      }\n    } catch (error) {\n      console.log('Cannot fetch geo points from activity stream');\n    }\n\n    return frame;\n  }\n\n  async metricFindQuery(query: VariableQuery, options?: any): Promise<MetricFindValue[]> {\n    const queryType = query.queryType;\n    if (queryType === VariableQueryTypes.SegmentEffort) {\n      const activityId = getTemplateSrv().replace(query.activityId);\n      const activity: StravaActivity = await this.stravaApi.getActivity({\n        id: activityId,\n        include_all_efforts: true,\n      });\n      const segmentEfforts: MetricFindValue[] = [];\n      for (const effort of activity.segment_efforts) {\n        segmentEfforts.push({ value: effort.id, text: effort.name });\n      }\n      return segmentEfforts;\n    } else {\n      const limit = query.limit || DEFAULT_LIMIT;\n      let activities = await this.stravaApi.getActivities({ limit });\n      activities = this.filterActivities(activities, query.activityType);\n      const variableOptions: MetricFindValue[] = activities.map((a) => ({\n        value: a.id,\n        text: a.name,\n      }));\n      return variableOptions;\n    }\n  }\n\n  async testDatasource() {\n    if (this.stravaAuthType !== StravaAuthType.RefreshToken) {\n      const authCode = this.getAuthCodeFromLocation();\n      if (authCode) {\n        // Exchange auth code for new refresh token if \"Connect with Strava\" button clicked\n        try {\n          await this.stravaApi.exchangeToken(authCode);\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    }\n\n    try {\n      await this.stravaApi.resetAccessToken();\n      const athlete = await this.stravaApi.getAuthenticatedAthlete();\n      if (!athlete) {\n        return { status: 'error', message: `Cannot get authenticated user.` };\n      }\n      return {\n        status: 'success',\n        message: `Data source is working. Authenticated as ${athlete.firstname} ${athlete.lastname}.`,\n      };\n    } catch (err: any) {\n      const message = err?.data?.message || '';\n      return { status: 'error', message: `Cannot connect to Strava API${message ? ': ' + message : ''}` };\n    }\n  }\n\n  getAuthCodeFromLocation() {\n    const AuthCodePattern = /code=([\\w]+)/;\n    const result = AuthCodePattern.exec(window.location.search);\n    const authCode = result && result.length && result[1];\n    return authCode;\n  }\n\n  filterActivities(activities: any[], activityType: StravaActivityType): any[] {\n    if (!activityType) {\n      // No filter, return all\n      return activities;\n    }\n\n    return activities.filter((activity) => {\n      if (activityType === 'Other') {\n        return activity.type !== 'Run' && activity.type !== 'Ride';\n      } else {\n      }\n      return activity.type === activityType;\n    });\n  }\n\n  transformActivitiesToTimeseries(activities: StravaActivity[], target: StravaQuery, range: TimeRange): DataFrame {\n    let datapoints: any[] = [];\n    for (const activity of activities) {\n      const statValue = getActivityStat(activity, target.activityStat, this.measurementPreference);\n      datapoints.push([statValue, dateTime(activity.start_date).valueOf()]);\n    }\n    datapoints.sort((dpA, dpB) => dpA[1] - dpB[1]);\n\n    if (target.interval !== StravaQueryInterval.No) {\n      const aggInterval =\n        !target.interval || target.interval === StravaQueryInterval.Auto\n          ? getAggregationInterval(range)\n          : getAggregationIntervalFromTarget(target);\n      if (aggInterval >= INTERVAL_4w) {\n        datapoints = groupByMonthSum(datapoints, range);\n      } else if (aggInterval === INTERVAL_1w) {\n        datapoints = groupByWeekSum(datapoints, range);\n      } else {\n        datapoints = groupBySum(datapoints, range, aggInterval);\n      }\n    }\n\n    const timeFiled: MutableField<number> = {\n      name: TIME_SERIES_TIME_FIELD_NAME,\n      type: FieldType.time,\n      config: {},\n      values: new ArrayVector(),\n    };\n\n    const valueFiled: MutableField<number> = {\n      name: TIME_SERIES_VALUE_FIELD_NAME,\n      type: FieldType.number,\n      config: {\n        unit: getStatUnit(target.activityStat, this.measurementPreference),\n      },\n      values: new ArrayVector(),\n    };\n\n    for (let i = 0; i < datapoints.length; i++) {\n      const dp = datapoints[i];\n      timeFiled.values.add(dp[1]);\n      valueFiled.values.add(dp[0]);\n    }\n\n    const alias = `${target.activityType ? target.activityType + '_' : ''}${target.activityStat}`;\n    return new MutableDataFrame({\n      name: alias,\n      refId: target.refId,\n      fields: [timeFiled, valueFiled],\n    });\n  }\n\n  transformActivitiesToTable(activities: StravaActivity[], target: StravaQuery) {\n    const distanceUnit = this.measurementPreference === StravaMeasurementPreference.Feet ? 'lengthmi' : 'lengthm';\n    const lenghtUnit = this.measurementPreference === StravaMeasurementPreference.Feet ? 'lengthft' : 'lengthm';\n\n    const frame = new MutableDataFrame({\n      refId: target.refId,\n      fields: [\n        { name: 'time', type: FieldType.time },\n        { name: 'name', type: FieldType.string },\n        { name: 'distance', type: FieldType.number, config: { unit: distanceUnit } },\n        { name: 'moving time', type: FieldType.number, config: { unit: 'dthms' } },\n        { name: 'elapsed time', type: FieldType.number, config: { unit: 'dthms' } },\n        { name: 'heart rate', type: FieldType.number, config: { unit: 'none', decimals: 0 } },\n        { name: 'elevation gain', type: FieldType.number, config: { unit: lenghtUnit, decimals: 0 } },\n        { name: 'kilojoules', type: FieldType.number, config: { unit: 'joule' } },\n        { name: 'type', type: FieldType.string },\n        { name: 'id', type: FieldType.string, config: { unit: 'none', custom: { hidden: true } } },\n        { name: 'time_from', type: FieldType.number, config: { unit: 'none', decimals: 0, custom: { hidden: true } } },\n        { name: 'time_to', type: FieldType.number, config: { unit: 'none', decimals: 0, custom: { hidden: true } } },\n      ],\n    });\n\n    target.extendedStats?.forEach((stat) => {\n      frame.addField({ name: stat });\n    });\n\n    for (let i = 0; i < activities.length; i++) {\n      const activity = activities[i];\n      const dataRow: any = {\n        time: dateTime(activity.start_date),\n        name: activity.name,\n        distance: getPreferredDistance(activity.distance, this.measurementPreference),\n        'moving time': activity.moving_time,\n        'elapsed time': activity.elapsed_time,\n        'heart rate': activity.average_heartrate,\n        'elevation gain': getPreferredLenght(activity.total_elevation_gain, this.measurementPreference),\n        kilojoules: activity.kilojoules,\n        type: activity.type,\n        id: activity.id,\n        time_from: dateTime(activity.start_date).unix() * 1000,\n        time_to: (dateTime(activity.start_date).unix() + activity.elapsed_time) * 1000,\n      };\n      target.extendedStats?.forEach((stat) => {\n        const statValue = (activity as any)[stat];\n        if (statValue) {\n          dataRow[stat] = statValue;\n        }\n      });\n      frame.add(dataRow);\n    }\n    return frame;\n  }\n\n  transformActivitiesToGeomap(activities: StravaActivity[], target: StravaQuery) {\n    const frame = new MutableDataFrame({\n      name: 'activities',\n      refId: target.refId,\n      fields: [\n        { name: 'name', type: FieldType.string },\n        { name: 'latitude', type: FieldType.number },\n        { name: 'longitude', type: FieldType.number },\n        {\n          name: 'value',\n          type: FieldType.number,\n          config: {\n            unit: getStatUnit(target.activityStat, this.measurementPreference),\n          },\n        },\n      ],\n    });\n\n    for (const activity of activities) {\n      const middlePoint = getActivityMiddlePoint(activity);\n      const latitude = middlePoint ? middlePoint[0] : activity.start_latlng[0];\n      const longitude = middlePoint ? middlePoint[1] : activity.start_latlng[1];\n      if (latitude && longitude) {\n        frame.add({\n          name: activity.name,\n          value: getActivityStat(activity, target.activityStat, this.measurementPreference),\n          latitude,\n          longitude,\n        });\n      }\n    }\n    return frame;\n  }\n\n  transformActivitiesToHeatmap(activities: StravaActivity[], target: StravaQuery) {\n    const frame = new MutableDataFrame({\n      name: 'heatmap',\n      refId: target.refId,\n      fields: [\n        { name: 'latitude', type: FieldType.number },\n        { name: 'longitude', type: FieldType.number },\n        { name: 'value', type: FieldType.number },\n      ],\n    });\n\n    for (const activity of activities) {\n      const summaryPolyline = activity?.map?.summary_polyline;\n      if (summaryPolyline) {\n        const points = polyline.decode(summaryPolyline);\n        for (let i = 0; i < points.length; i++) {\n          frame.add({\n            latitude: points[i][0],\n            longitude: points[i][1],\n            value: 1,\n          });\n        }\n      }\n    }\n    return frame;\n  }\n}\n\nfunction getActivityMiddlePoint(activity: any): number[] | null {\n  if (!activity.map || !activity.map.summary_polyline) {\n    return null;\n  }\n\n  const summaryPolyline = activity.map.summary_polyline;\n  const points = polyline.decode(summaryPolyline);\n  if (points && points.length) {\n    const middleIndex = Math.floor(points.length / 2);\n    return points[middleIndex];\n  } else {\n    return null;\n  }\n}\n\nconst INTERVAL_1h = 3600000;\nconst INTERVAL_1d = 86400000;\nconst INTERVAL_1w = 604800000;\nconst INTERVAL_4w = 2419200000;\n\nfunction getAggregationInterval(range: TimeRange): number {\n  const interval = range.to.unix() - range.from.unix();\n  const interval_ms = interval * 1000;\n  switch (true) {\n    // 4d\n    case interval_ms <= 345600000:\n      return INTERVAL_1h; // 1h\n    // 90d\n    case interval_ms <= 7776000000:\n      return INTERVAL_1d; // 1d\n    // 1y\n    case interval_ms <= 31536000000:\n      return INTERVAL_1w; // 1w\n    default:\n      return INTERVAL_4w; // 4w\n  }\n}\n\nfunction getAggregationIntervalFromTarget(target: StravaQuery): number {\n  switch (target.interval) {\n    case StravaQueryInterval.Hour:\n      return INTERVAL_1h;\n    case StravaQueryInterval.Day:\n      return INTERVAL_1d;\n    case StravaQueryInterval.Week:\n      return INTERVAL_1w;\n    case StravaQueryInterval.Month:\n      return INTERVAL_4w;\n    default:\n      return INTERVAL_4w;\n  }\n}\n\nconst POINT_VALUE = 0;\nconst POINT_TIMESTAMP = 1;\n\nconst AGG_SUM = (values: TimeSeriesValue[]) => {\n  return values.reduce((acc, val) => acc! + val!);\n};\n\nexport function groupBySum(datapoints: TimeSeriesPoints, range: TimeRange, interval: number): TimeSeriesPoints {\n  return groupByTime(datapoints, range, interval, getPointTimeFrame, getNextTimeFrame, AGG_SUM);\n}\n\nexport function groupByWeekSum(datapoints: TimeSeriesPoints, range: TimeRange): TimeSeriesPoints {\n  return groupByTime(datapoints, range, null, getClosestWeek, getNextWeek, AGG_SUM);\n}\n\nexport function groupByMonthSum(datapoints: TimeSeriesPoints, range: TimeRange): TimeSeriesPoints {\n  return groupByTime(datapoints, range, null, getClosestMonth, getNextMonth, AGG_SUM);\n}\n\nexport function groupByTime(\n  datapoints: any[],\n  range: TimeRange,\n  interval: number | null,\n  intervalFn: any,\n  nextIntervalFn: any,\n  groupByFn: any\n): any[] {\n  if (datapoints.length === 0) {\n    return [];\n  }\n\n  const time_from = range.from.unix() * 1000;\n  const time_to = range.to.unix() * 1000;\n  let grouped_series: any[] = [];\n  let frame_values: any[] = [];\n  let frame_value;\n  let frame_ts = datapoints.length ? intervalFn(time_from, interval) : 0;\n  let point_frame_ts = frame_ts;\n  let point;\n\n  for (let i = 0; i < datapoints.length; i++) {\n    point = datapoints[i];\n    point_frame_ts = intervalFn(point[POINT_TIMESTAMP], interval);\n    if (point_frame_ts === frame_ts) {\n      frame_values.push(point[POINT_VALUE]);\n    } else if (point_frame_ts > frame_ts) {\n      frame_value = frame_values.length ? groupByFn(frame_values) : null;\n      grouped_series.push([frame_value, frame_ts]);\n\n      // Move frame window to next non-empty interval and fill empty by null\n      frame_ts = nextIntervalFn(frame_ts, interval);\n      while (frame_ts < point_frame_ts) {\n        grouped_series.push([null, frame_ts]);\n        frame_ts = nextIntervalFn(frame_ts, interval);\n      }\n      frame_values = [point[POINT_VALUE]];\n    }\n  }\n\n  frame_value = groupByFn(frame_values);\n  grouped_series.push([frame_value, frame_ts]);\n\n  // Move frame window to end of time range and fill empty by null\n  frame_ts = nextIntervalFn(frame_ts, interval);\n  while (frame_ts < time_to) {\n    grouped_series.push([null, frame_ts]);\n    frame_ts = nextIntervalFn(frame_ts, interval);\n  }\n\n  return grouped_series;\n}\n\nfunction getPointTimeFrame(timestamp: any, ms_interval: any) {\n  return Math.floor(timestamp / ms_interval) * ms_interval;\n}\n\nfunction getNextTimeFrame(timestamp: any, ms_interval: any) {\n  return timestamp + ms_interval;\n}\n\nfunction getClosestMonth(timestamp: any): number {\n  const month_time = dateTime(timestamp).startOf('month');\n  return month_time.unix() * 1000;\n}\n\nfunction getNextMonth(timestamp: any): number {\n  const next_month_time = dateTime(timestamp).add(1, 'month');\n  return next_month_time.unix() * 1000;\n}\n\nfunction getClosestWeek(timestamp: any): number {\n  // The first Monday after the Unix Epoch begins on Jan 5, 1970, 00:00.\n  // This is a UNIX timestamp of 96 hours or 345600000 ms\n  const FIRST_MONDAY_MS = 345600000;\n  const week_ts = timestamp - FIRST_MONDAY_MS;\n  return Math.floor(week_ts / INTERVAL_1w) * INTERVAL_1w + FIRST_MONDAY_MS;\n}\n\nfunction getNextWeek(timestamp: any): number {\n  return timestamp + INTERVAL_1w;\n}\n\nfunction getPreferredDistance(value: number, measurementPreference: StravaMeasurementPreference): number {\n  return measurementPreference === StravaMeasurementPreference.Feet ? metersToMiles(value) : value;\n}\n\nfunction getPreferredLenght(value: number, measurementPreference: StravaMeasurementPreference): number {\n  return measurementPreference === StravaMeasurementPreference.Feet ? metersToFeet(value) : value;\n}\n\nfunction getPreferredSpeed(value: number, measurementPreference: StravaMeasurementPreference): number {\n  const speedKmph = velocityToSpeed(value);\n  return measurementPreference === StravaMeasurementPreference.Feet ? metersToMiles(speedKmph * 1000) : speedKmph;\n}\n\nfunction getPreferredSpeedUnit(measurementPreference: StravaMeasurementPreference) {\n  return measurementPreference === StravaMeasurementPreference.Feet ? 'velocitymph' : 'velocitykmh';\n}\n\nfunction getPreferredLenghtUnit(measurementPreference: StravaMeasurementPreference) {\n  return measurementPreference === StravaMeasurementPreference.Feet ? 'lengthft' : 'lengthm';\n}\n\nfunction getPreferredPace(value: number, measurementPreference: StravaMeasurementPreference): number {\n  const paceMinkm = velocityToPace(value);\n  return measurementPreference === StravaMeasurementPreference.Feet ? paceToMiles(paceMinkm) : paceMinkm;\n}\n\nfunction getActivityStat(\n  activity: StravaActivity,\n  activityStat: StravaActivityStat,\n  measurementPreference: StravaMeasurementPreference\n) {\n  if (activityStat === StravaActivityStat.Distance) {\n    return getPreferredDistance(activity.distance, measurementPreference);\n  } else if (activityStat === StravaActivityStat.ElevationGain) {\n    return getPreferredLenght(activity.total_elevation_gain, measurementPreference);\n  } else {\n    return activity[activityStat];\n  }\n}\n\nfunction getStatUnit(activityStat: StravaActivityStat, measurementPreference: StravaMeasurementPreference): string {\n  if (activityStat === StravaActivityStat.Distance) {\n    return measurementPreference === StravaMeasurementPreference.Feet ? 'lengthmi' : 'lengthm';\n  }\n  if (activityStat === StravaActivityStat.ElevationGain) {\n    return measurementPreference === StravaMeasurementPreference.Feet ? 'lengthft' : 'lengthm';\n  }\n  if (activityStat === StravaActivityStat.ElapsedTime || activityStat === StravaActivityStat.MovingTime) {\n    return 'dthms';\n  }\n  if (activityStat === StravaActivityStat.AveragePower) {\n    return 'watt';\n  }\n  return 'none';\n}\n","import React, { PureComponent } from 'react';\nimport { SelectableValue } from '@grafana/data';\nimport { VariableQueryTypes, StravaActivityType, VariableQuery } from '../types';\nimport { InlineField, InlineFieldRow, InlineFormLabel, Input, Select } from '@grafana/ui';\nimport { DEFAULT_LIMIT } from '../datasource';\n\nconst stravaActivityTypeOptions: Array<SelectableValue<StravaActivityType>> = [\n  { value: '', label: 'All' },\n  { value: 'Run', label: 'Run' },\n  { value: 'Ride', label: 'Ride' },\n  { value: 'Other', label: 'Other' },\n];\n\nexport interface VariableQueryProps {\n  query: VariableQuery;\n  onChange: (query: VariableQuery, definition: string) => void;\n  datasource: any;\n  templateSrv: any;\n}\n\ninterface State {\n  limit: number;\n}\n\nexport class StravaVariableQueryEditor extends PureComponent<VariableQueryProps, State> {\n  constructor(props: VariableQueryProps) {\n    super(props);\n    const { query } = this.props;\n    this.state = {\n      limit: query.limit || DEFAULT_LIMIT,\n    };\n  }\n\n  queryTypes: Array<SelectableValue<VariableQueryTypes>> = [\n    { value: VariableQueryTypes.Activity, label: 'Activity' },\n    { value: VariableQueryTypes.SegmentEffort, label: 'Segment effort' },\n  ];\n\n  onQueryTypeChange = (selectedItem: SelectableValue<VariableQueryTypes>) => {\n    const queryType = selectedItem.value || VariableQueryTypes.Activity;\n\n    const queryModel: VariableQuery = { ...this.props.query, queryType };\n    this.props.onChange(queryModel, `Strava - ${queryType}`);\n  };\n\n  onActivityTypeChange = (selectedItem: SelectableValue<StravaActivityType>) => {\n    const activityType = selectedItem.value || '';\n\n    const queryModel: VariableQuery = { ...this.props.query, activityType };\n    this.props.onChange(queryModel, `Strava - ${this.props.query.queryType}`);\n  };\n\n  onLimitStateChange = (e: React.SyntheticEvent<HTMLInputElement>) => {\n    const limit = Number(e.currentTarget.value || '');\n    this.setState({ limit });\n  };\n\n  onLimitChange = (e: React.SyntheticEvent<HTMLInputElement>) => {\n    const limit = Number(e.currentTarget.value || '');\n    const queryModel: VariableQuery = { ...this.props.query, limit };\n    this.props.onChange(queryModel, `Strava - ${this.props.query.queryType}`);\n  };\n\n  onActivityIdChange = (e: React.SyntheticEvent<HTMLInputElement>) => {\n    const activityId = e.currentTarget.value || '';\n    const queryModel: VariableQuery = { ...this.props.query, activityId };\n    this.props.onChange(queryModel, `Strava - ${this.props.query.queryType}`);\n  };\n\n  render() {\n    const { query } = this.props;\n    const { limit } = this.state;\n\n    return (\n      <>\n        <div className=\"gf-form max-width-21\">\n          <InlineFormLabel width={10}>Query Type</InlineFormLabel>\n          <Select width={20} value={query.queryType} options={this.queryTypes} onChange={this.onQueryTypeChange} />\n        </div>\n        <div className=\"gf-form-inline\">\n          {query.queryType === VariableQueryTypes.Activity && (\n            <InlineFieldRow>\n              <InlineField label=\"Activity Type\" labelWidth={20}>\n                <Select\n                  width={16}\n                  value={query.activityType}\n                  onChange={this.onActivityTypeChange}\n                  options={stravaActivityTypeOptions}\n                />\n              </InlineField>\n              <InlineField label=\"Limit\" labelWidth={10} tooltip=\"API query limit. Set to 0 for no limit.\">\n                <Input\n                  type=\"number\"\n                  value={limit}\n                  onChange={this.onLimitStateChange}\n                  onBlur={this.onLimitChange}\n                  width={12}\n                />\n              </InlineField>\n            </InlineFieldRow>\n          )}\n          {query.queryType === VariableQueryTypes.SegmentEffort && (\n            <InlineFieldRow>\n              <InlineField label=\"Activity\" labelWidth={20} tooltip=\"Activity id\">\n                <Input\n                  value={query.activityId}\n                  onChange={this.onActivityIdChange}\n                  onBlur={this.onActivityIdChange}\n                  width={30}\n                />\n              </InlineField>\n            </InlineFieldRow>\n          )}\n        </div>\n      </>\n    );\n  }\n}\n","import React, { PureComponent, ChangeEvent } from 'react';\nimport { Button, RadioButtonGroup, InlineField, Input, InlineFieldRow } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps, DataSourceSettings } from '@grafana/data';\nimport { StravaAuthType, StravaJsonData, StravaSecureJsonData } from '../types';\n\nconst AuthCodePattern = /code=([\\w]+)/;\n\nconst authOptions = [\n  { label: 'OAuth', value: StravaAuthType.OAuth },\n  { label: 'Refresh token', value: StravaAuthType.RefreshToken },\n];\n\nexport type Props = DataSourcePluginOptionsEditorProps<StravaJsonData>;\n\ntype StravaSettings = DataSourceSettings<StravaJsonData, StravaSecureJsonData>;\n\nexport interface State {\n  config: StravaSettings;\n}\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const { options } = this.props;\n\n    this.state = {\n      config: ConfigEditor.defaults(options),\n    };\n\n    this.updateDatasource(this.state.config);\n  }\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    return {\n      ...state,\n      config: ConfigEditor.defaults(props.options),\n    };\n  }\n\n  static defaults = (options: any) => {\n    if (!options.hasOwnProperty('secureJsonData')) {\n      options.secureJsonData = {};\n    }\n\n    if (!options.hasOwnProperty('jsonData')) {\n      options.jsonData = {};\n    }\n\n    if (!options.hasOwnProperty('secureJsonFields')) {\n      options.secureJsonFields = {};\n    }\n\n    if (!options.jsonData.stravaAuthType) {\n      options.jsonData.stravaAuthType = StravaAuthType.OAuth;\n    }\n\n    return options;\n  };\n\n  updateDatasource = async (config: any) => {\n    for (const j in config.jsonData) {\n      if (config.jsonData[j].length === 0) {\n        delete config.jsonData[j];\n      }\n    }\n\n    for (const k in config.secureJsonData) {\n      if (config.secureJsonData[k].length === 0) {\n        delete config.secureJsonData[k];\n      }\n    }\n\n    this.props.onOptionsChange({\n      ...config,\n    });\n  };\n\n  onCacheTTLChange = (cacheTTL: string) => {\n    this.updateDatasource({\n      ...this.state.config,\n      jsonData: {\n        ...this.state.config.jsonData,\n        cacheTTL,\n      },\n    });\n  };\n\n  onResetClientSecret = () => {\n    this.updateDatasource({\n      ...this.state.config,\n      secureJsonFields: {\n        ...this.state.config.secureJsonFields,\n        clientSecret: false,\n      },\n    });\n  };\n\n  onResetRefreshToken = () => {\n    this.updateDatasource({\n      ...this.state.config,\n      secureJsonFields: {\n        ...this.state.config.secureJsonFields,\n        refreshToken: false,\n      },\n    });\n  };\n\n  onAccessTokenChange = (accessToken: string) => {\n    this.updateDatasource({\n      ...this.state.config,\n      secureJsonData: {\n        ...this.state.config.secureJsonData,\n        accessToken,\n      },\n    });\n  };\n\n  onClientIDChange = (clientID: string) => {\n    this.updateDatasource({\n      ...this.state.config,\n      jsonData: {\n        ...this.state.config.jsonData,\n        clientID,\n      },\n    });\n  };\n\n  onClientSecretChange = (clientSecret: string) => {\n    this.updateDatasource({\n      ...this.state.config,\n      secureJsonData: {\n        ...this.state.config.secureJsonData,\n        clientSecret,\n      },\n    });\n  };\n\n  onRefreshTokenChange = (refreshToken: string) => {\n    this.updateDatasource({\n      ...this.state.config,\n      secureJsonData: {\n        ...this.state.config.secureJsonData,\n        refreshToken,\n      },\n    });\n  };\n\n  onAuthCodeChange = (authCode: string) => {\n    this.updateDatasource({\n      ...this.state.config,\n      secureJsonData: {\n        ...this.state.config.secureJsonData,\n        authCode,\n      },\n    });\n  };\n\n  onAuthTypeChange = (value?: StravaAuthType) => {\n    this.updateDatasource({\n      ...this.state.config,\n      jsonData: {\n        ...this.state.config.jsonData,\n        stravaAuthType: value,\n      },\n    });\n  };\n\n  isLocationContainsCode = () => {\n    return AuthCodePattern.test(window.location.search);\n  };\n\n  isLocationContainsError = () => {\n    return /error=/.test(window.location.search);\n  };\n\n  getConnectWithStravaHref = () => {\n    const authUrl = 'https://www.strava.com/oauth/authorize';\n    const currentLocation = window.location.origin + window.location.pathname;\n    const clientID = this.state.config.jsonData.clientID;\n    const authScope = 'read_all,profile:read_all,activity:read_all';\n    return `${authUrl}?client_id=${clientID}&response_type=code&redirect_uri=${currentLocation}&approval_prompt=force&scope=${authScope}`;\n  };\n\n  render() {\n    const { config } = this.state;\n    const connectWithStravaHref = this.getConnectWithStravaHref();\n\n    return (\n      <>\n        <h2 className=\"page-heading\">Strava API Details</h2>\n        <div className=\"gf-form-group\">\n          <h5>Auth type</h5>\n          <RadioButtonGroup\n            options={authOptions}\n            value={config.jsonData.stravaAuthType}\n            onChange={this.onAuthTypeChange}\n          />\n        </div>\n        <div className=\"gf-form-group\">\n          <InlineFieldRow>\n            <InlineField label=\"Client ID\" labelWidth={16}>\n              <Input\n                width={50}\n                value={config.jsonData.clientID || ''}\n                onChange={(event: ChangeEvent<HTMLInputElement>) => this.onClientIDChange(event.target.value)}\n              />\n            </InlineField>\n          </InlineFieldRow>\n          <InlineFieldRow>\n            {config.secureJsonFields && config.secureJsonFields.clientSecret ? (\n              <>\n                <InlineField label=\"Client Secret\" labelWidth={16}>\n                  <Input placeholder=\"Configured\" width={50} disabled />\n                </InlineField>\n                <InlineField>\n                  <Button variant=\"secondary\" type=\"button\" onClick={this.onResetClientSecret}>\n                    Reset\n                  </Button>\n                </InlineField>\n              </>\n            ) : (\n              <InlineField label=\"Client Secret\" labelWidth={16}>\n                <Input\n                  width={50}\n                  value={config.secureJsonData?.clientSecret || ''}\n                  onChange={(event: ChangeEvent<HTMLInputElement>) => this.onClientSecretChange(event.target.value)}\n                />\n              </InlineField>\n            )}\n          </InlineFieldRow>\n          {config.jsonData?.stravaAuthType === StravaAuthType.RefreshToken && (\n            <InlineFieldRow>\n              {config.secureJsonFields && config.secureJsonFields.refreshToken ? (\n                <>\n                  <InlineField label=\"Refresh Token\" labelWidth={16}>\n                    <Input placeholder=\"Configured\" width={50} disabled />\n                  </InlineField>\n                  <InlineField>\n                    <Button variant=\"secondary\" type=\"button\" onClick={this.onResetRefreshToken}>\n                      Reset\n                    </Button>\n                  </InlineField>\n                </>\n              ) : (\n                <InlineField label=\"Refresh Token\" labelWidth={16}>\n                  <Input\n                    width={50}\n                    value={config.secureJsonData?.refreshToken || ''}\n                    onChange={(event: ChangeEvent<HTMLInputElement>) => this.onRefreshTokenChange(event.target.value)}\n                  />\n                </InlineField>\n              )}\n            </InlineFieldRow>\n          )}\n        </div>\n        {config.jsonData?.stravaAuthType !== StravaAuthType.RefreshToken && (\n          <div className=\"gf-form-group\">\n            <a type=\"button\" href={connectWithStravaHref}>\n              <img src=\"public/plugins/grafana-strava-datasource/img/btn_strava_connectwith_orange.svg\" />\n            </a>\n          </div>\n        )}\n        <InlineFieldRow>\n          <InlineField label=\"Cache TTL\" labelWidth={16}>\n            <Input\n              width={10}\n              value={config.jsonData.cacheTTL || ''}\n              placeholder=\"1h\"\n              onChange={(event: ChangeEvent<HTMLInputElement>) => this.onCacheTTLChange(event.target.value)}\n            />\n          </InlineField>\n        </InlineFieldRow>\n      </>\n    );\n  }\n}\n","import { __assign } from \"tslib\";\nimport { useCallback, useRef, useState } from 'react';\nimport useMountedState from './useMountedState';\nexport default function useAsyncFn(fn, deps, initialState) {\n    if (deps === void 0) { deps = []; }\n    if (initialState === void 0) { initialState = { loading: false }; }\n    var lastCallId = useRef(0);\n    var isMounted = useMountedState();\n    var _a = useState(initialState), state = _a[0], set = _a[1];\n    var callback = useCallback(function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var callId = ++lastCallId.current;\n        if (!state.loading) {\n            set(function (prevState) { return (__assign(__assign({}, prevState), { loading: true })); });\n        }\n        return fn.apply(void 0, args).then(function (value) {\n            isMounted() && callId === lastCallId.current && set({ value: value, loading: false });\n            return value;\n        }, function (error) {\n            isMounted() && callId === lastCallId.current && set({ error: error, loading: false });\n            return error;\n        });\n    }, deps);\n    return [state, callback];\n}\n","import { useCallback, useEffect, useRef } from 'react';\nexport default function useMountedState() {\n    var mountedRef = useRef(false);\n    var get = useCallback(function () { return mountedRef.current; }, []);\n    useEffect(function () {\n        mountedRef.current = true;\n        return function () {\n            mountedRef.current = false;\n        };\n    }, []);\n    return get;\n}\n","import React, { FC } from 'react';\nimport { css, cx } from 'emotion';\nimport { InlineFormLabel, Spinner, stylesFactory, useTheme } from '@grafana/ui';\nimport { GrafanaTheme } from '@grafana/data';\nimport { StravaAthlete } from '../types';\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => {\n  return {\n    athleteLabel: css`\n      height: ${theme.spacing.formInputHeight}px;\n      padding: 2px;\n      margin-right: 0px;\n      border-radius: ${theme.border.radius.md};\n      background-color: ${theme.colors.bg2};\n    `,\n    athleteAvatar: css`\n      height: 28px;\n      border-radius: 50%;\n    `,\n    athletePlaceholder: css`\n      width: 28px;\n    `,\n    spinner: css`\n      width: 28px;\n      height: ${theme.spacing.formInputHeight}px;\n      padding: 2px;\n      border-radius: ${theme.border.radius.md};\n      background-color: ${theme.palette.dark4};\n    `,\n  };\n});\n\ninterface Props {\n  athlete?: StravaAthlete;\n  isLoading?: boolean;\n}\n\nexport const AthleteLabel: FC<Props> = ({ athlete, isLoading }: Props) => {\n  const styles = getStyles(useTheme());\n  const imgClass = cx('filter-table__avatar', styles.athleteAvatar);\n  return isLoading ? (\n    <div className=\"gf-form\">\n      <div className={styles.spinner}>\n        <Spinner size={20} />\n      </div>\n      <InlineFormLabel>&nbsp;</InlineFormLabel>\n    </div>\n  ) : (\n    <div className=\"gf-form\">\n      {athlete?.profile_medium ? (\n        <div className={styles.athleteLabel}>\n          <img className={imgClass} src={athlete.profile_medium} />\n        </div>\n      ) : (\n        <div className={styles.athletePlaceholder}></div>\n      )}\n      <InlineFormLabel>\n        {athlete?.firstname} {athlete?.lastname}\n      </InlineFormLabel>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useAsyncFn } from 'react-use';\nimport { SelectableValue, QueryEditorProps, dateTime } from '@grafana/data';\nimport { InlineField, InlineFieldRow, InlineFormLabel, InlineSwitch, MultiSelect, Select } from '@grafana/ui';\nimport {\n  StravaQuery,\n  StravaQueryType,\n  StravaActivityStat,\n  StravaQueryFormat,\n  StravaActivityType,\n  StravaJsonData,\n  StravaQueryInterval,\n  StravaActivityStream,\n  StravaActivityData,\n  StravaSplitStat,\n  StravaAthlete,\n  TopAchievementStat,\n  StravaActivity,\n} from '../types';\nimport StravaDatasource from '../datasource';\nimport { AthleteLabel } from './AthleteLabel';\nimport { getTemplateSrv } from '@grafana/runtime';\n\nconst ACTIVITY_DATE_FORMAT = 'YYYY-MM-DD HH:mm';\n\nconst stravaQueryTypeOptions: Array<SelectableValue<StravaQueryType>> = [\n  {\n    value: StravaQueryType.Activities,\n    label: 'Activities',\n    description: 'Athlete Activities',\n  },\n  {\n    value: StravaQueryType.Activity,\n    label: 'Activity',\n    description: 'Individual activity',\n  },\n  {\n    value: StravaQueryType.SegmentEffort,\n    label: 'Segment effort',\n    description: 'Activity segment efforts',\n  },\n];\n\nconst stravaActivityStatOptions: Array<SelectableValue<StravaActivityStat>> = [\n  { value: StravaActivityStat.Distance, label: 'Distance' },\n  { value: StravaActivityStat.ElapsedTime, label: 'Elapsed Time' },\n  { value: StravaActivityStat.MovingTime, label: 'Moving Time' },\n  { value: StravaActivityStat.ElevationGain, label: 'Elevation Gain' },\n  { value: StravaActivityStat.AverageHeartRate, label: 'Average Heart Rate' },\n  { value: StravaActivityStat.AveragePower, label: 'Average Power' },\n  { value: StravaActivityStat.WeightedAveragePower, label: 'Weighted Average Power' },\n];\n\nconst stravaActivityTypeOptions: Array<SelectableValue<StravaActivityType>> = [\n  { value: null, label: 'All' },\n  { value: 'Run', label: 'Run' },\n  { value: 'Ride', label: 'Ride' },\n  { value: 'Other', label: 'Other' },\n];\n\nconst stravaActivityDataOptions: Array<SelectableValue<StravaActivityData>> = [\n  { value: StravaActivityData.Graph, label: 'Graph' },\n  { value: StravaActivityData.Splits, label: 'Splits' },\n  { value: StravaActivityData.Stats, label: 'Stats' },\n  { value: StravaActivityData.Segments, label: 'Segments' },\n  { value: StravaActivityData.Geomap, label: 'Geomap' },\n];\n\nconst stravaSegmentDataOptions: Array<SelectableValue<StravaActivityData>> = [\n  { value: StravaActivityData.Graph, label: 'Graph' },\n  { value: StravaActivityData.Geomap, label: 'Geomap' },\n];\n\nconst stravaActivityGraphOptions: Array<SelectableValue<StravaActivityStream>> = [\n  // { value: StravaActivityStream.Distance, label: 'Distance' },\n  { value: StravaActivityStream.HeartRate, label: 'Heart Rate' },\n  { value: StravaActivityStream.Velocity, label: 'Speed' },\n  { value: StravaActivityStream.Pace, label: 'Pace' },\n  { value: StravaActivityStream.WattsCalc, label: 'Est Power' },\n  { value: StravaActivityStream.Watts, label: 'Watts' },\n  { value: StravaActivityStream.Cadence, label: 'Cadence' },\n  { value: StravaActivityStream.Altitude, label: 'Altitude' },\n  { value: StravaActivityStream.GradeSmooth, label: 'Gradient' },\n  // { value: StravaActivityStream.GradeAdjustedDistance, label: 'Gradient (adjusted)' },\n  // { value: StravaActivityStream.Temp, label: 'Temp' },\n];\n\nconst stravaActivitySplitOptions: Array<SelectableValue<StravaSplitStat>> = [\n  { value: StravaSplitStat.Pace, label: 'Pace' },\n  { value: StravaSplitStat.HeartRate, label: 'Heart Rate' },\n  { value: StravaSplitStat.Speed, label: 'Speed' },\n  { value: StravaSplitStat.ElapsedTime, label: 'Elapsed Time' },\n  { value: StravaSplitStat.MovingTime, label: 'Moving Time' },\n];\n\nconst FORMAT_OPTIONS: Array<SelectableValue<StravaQueryFormat>> = [\n  { label: 'Time series', value: StravaQueryFormat.TimeSeries },\n  { label: 'Table', value: StravaQueryFormat.Table },\n  { label: 'Geomap', value: StravaQueryFormat.WorldMap },\n  { label: 'Heatmap', value: StravaQueryFormat.Heatmap },\n];\n\nconst INTERVAL_OPTIONS: Array<SelectableValue<StravaQueryInterval>> = [\n  { label: 'Auto', value: StravaQueryInterval.Auto },\n  { label: 'No', value: StravaQueryInterval.No },\n  { label: 'Hour', value: StravaQueryInterval.Hour },\n  { label: 'Day', value: StravaQueryInterval.Day },\n  { label: 'Week', value: StravaQueryInterval.Week },\n  { label: 'Month', value: StravaQueryInterval.Month },\n];\n\nconst extendedStatsOptions: Array<SelectableValue<string>> = [\n  { label: 'achievement_count', value: 'achievement_count' },\n  { label: 'top_achievement', value: TopAchievementStat },\n  { label: 'average_speed', value: 'average_speed' },\n  { label: 'average_watts', value: 'average_watts' },\n  { label: 'weighted_average_watts', value: 'weighted_average_watts' },\n  { label: 'calories', value: 'calories' },\n  { label: 'comment_count', value: 'comment_count' },\n  { label: 'commute', value: 'commute' },\n  { label: 'device_watts', value: 'device_watts' },\n  { label: 'elev_high', value: 'elev_high' },\n  { label: 'elev_low', value: 'elev_low' },\n  { label: 'has_kudoed', value: 'has_kudoed' },\n  { label: 'kudos_count', value: 'kudos_count' },\n  { label: 'location_city', value: 'location_city' },\n  { label: 'location_country', value: 'location_country' },\n  { label: 'location_state', value: 'location_state' },\n  { label: 'manual', value: 'manual' },\n  { label: 'max_heartrate', value: 'max_heartrate' },\n  { label: 'max_speed', value: 'max_speed' },\n  { label: 'pr_count', value: 'pr_count' },\n  { label: 'start_date', value: 'start_date' },\n  { label: 'start_date_local', value: 'start_date_local' },\n  { label: 'start_latitude', value: 'start_latitude' },\n  { label: 'start_longitude', value: 'start_longitude' },\n  { label: 'trainer', value: 'trainer' },\n  { label: 'workout_type', value: 'workout_type' },\n  { label: 'device_name', value: 'device_name' },\n  { label: 'gear_id', value: 'gear_id' },\n  { label: 'gear_name', value: 'gear_name' },\n  { label: 'gear_nickname', value: 'device_nickname' },\n  { label: 'gear_distance', value: 'gear_distance' },\n];\n\nconst baseStatsOptions: Array<SelectableValue<string>> = [\n  { label: 'start_date', value: 'start_date' },\n  { label: 'name', value: 'name' },\n  { label: 'distance', value: 'distance' },\n  { label: 'pace', value: 'pace' },\n  { label: 'moving_time', value: 'moving_time' },\n  { label: 'elapsed_time', value: 'elapsed_time' },\n  { label: 'average_heartrate', value: 'average_heartrate' },\n  { label: 'total_elevation_gain', value: 'total_elevation_gain' },\n  { label: 'kilojoules', value: 'kilojoules' },\n  { label: 'type', value: 'type' },\n  { label: 'id', value: 'id' },\n];\n\nconst stravaStatsOptions = baseStatsOptions.concat(extendedStatsOptions);\n\nexport const defaultQuery: StravaQuery = {\n  refId: '',\n  queryType: StravaQueryType.Activities,\n  activityType: null,\n  activityStat: StravaActivityStat.Distance,\n  format: StravaQueryFormat.TimeSeries,\n  interval: StravaQueryInterval.Auto,\n  activityData: StravaActivityData.Graph,\n  activityGraph: StravaActivityStream.Pace,\n  splitStat: StravaSplitStat.Speed,\n  singleActivityStat: 'name',\n  extendedStats: [],\n  fitToTimeRange: true,\n  segmentData: StravaActivityData.Graph,\n  segmentGraph: StravaActivityStream.Pace,\n};\n\nexport interface Props extends QueryEditorProps<StravaDatasource, StravaQuery, StravaJsonData> {}\n\nexport const QueryEditor = ({ query, datasource, onChange, onRunQuery }: Props) => {\n  query = { ...defaultQuery, ...query };\n  const [athlete, setAthlete] = useState<StravaAthlete | undefined>(datasource.athlete);\n  const [{ loading: athleteLoading }, fetchAuthenticatedAthlete] = useAsyncFn(async () => {\n    const result = await datasource.stravaApi.getAuthenticatedAthlete();\n    setAthlete(result);\n    return result;\n  });\n  const [{ value: activitiesOptions }, fetchActivitiesOptions] = useAsyncFn(async () => {\n    return await getActivitiesOptions(query.activityType);\n  }, [query.activityType]);\n  const [{ value: segmentsOptions }, fetchSegmentsOptions] = useAsyncFn(async () => {\n    const activityId = getTemplateSrv().replace(query.activityId?.toString());\n    return await getSegmentsOptions(activityId);\n  }, [query.activityType]);\n\n  useEffect(() => {\n    if (!datasource.athlete) {\n      fetchAuthenticatedAthlete();\n    }\n    fetchActivitiesOptions();\n    if (query.queryType === StravaQueryType.SegmentEffort) {\n      fetchSegmentsOptions();\n    }\n  }, [datasource.athlete, fetchAuthenticatedAthlete, fetchActivitiesOptions]);\n\n  const getActivitiesOptions = async (activityType: StravaActivityType): Promise<Array<SelectableValue<number>>> => {\n    let activities = await datasource.stravaApi.getActivities({ limit: 100 });\n    activities = datasource.filterActivities(activities, activityType);\n    let options: Array<SelectableValue<number>> = activities.map((a) => ({\n      value: a.id,\n      label: a.name,\n      description: `${dateTime(a.start_date_local).format(ACTIVITY_DATE_FORMAT)} (${a.type})`,\n    }));\n\n    const variables: SelectableValue[] = getTemplateSrv()\n      .getVariables()\n      .map((v) => ({\n        value: `$${v.name}`,\n        label: `$${v.name}`,\n        description: 'Variable',\n      }));\n    return variables.concat(options);\n  };\n\n  const getSegmentsOptions = async (activityId: string): Promise<Array<SelectableValue<number>>> => {\n    let options: Array<SelectableValue<number>> = [];\n    try {\n      let activity: StravaActivity = await datasource.stravaApi.getActivity({\n        id: activityId,\n        include_all_efforts: true,\n      });\n      options = activity.segment_efforts?.map((a) => ({\n        value: a.id,\n        label: a.name,\n        description: `${dateTime(a.start_date).format(ACTIVITY_DATE_FORMAT)}`,\n      }));\n    } catch (error) {\n      console.log(error);\n    }\n\n    const variables: SelectableValue[] = getTemplateSrv()\n      .getVariables()\n      .map((v) => ({\n        value: `$${v.name}`,\n        label: `$${v.name}`,\n        description: 'Variable',\n      }));\n    return variables.concat(options);\n  };\n\n  const getSelectedQueryType = () => {\n    return stravaQueryTypeOptions.find((v) => v.value === query.queryType);\n  };\n\n  const getSelectedActivityStat = () => {\n    return stravaActivityStatOptions.find((v) => v.value === query.activityStat);\n  };\n\n  const getSelectedActivityType = () => {\n    return stravaActivityTypeOptions.find((v) => v.value === query.activityType);\n  };\n\n  const getSelectedActivityData = () => {\n    return stravaActivityDataOptions.find((v) => v.value === query.activityData);\n  };\n\n  const getSelectedActivityGraph = () => {\n    return stravaActivityGraphOptions.find((v) => v.value === query.activityGraph);\n  };\n\n  const getSelectedActivitySplit = () => {\n    return stravaActivitySplitOptions.find((v) => v.value === query.splitStat);\n  };\n\n  const getSelectedSingleActivityStat = () => {\n    return (\n      stravaStatsOptions.find((v) => v.value === query.singleActivityStat) || {\n        label: query.singleActivityStat,\n        value: query.singleActivityStat,\n      }\n    );\n  };\n\n  const getSelectedSegmentData = () => {\n    return stravaSegmentDataOptions.find((v) => v.value === query.segmentData);\n  };\n\n  const getSelectedSegmentGraph = () => {\n    return stravaActivityGraphOptions.find((v) => v.value === query.segmentGraph);\n  };\n\n  const getFormatOption = () => {\n    return FORMAT_OPTIONS.find((v) => v.value === query.format);\n  };\n\n  const getIntervalOption = () => {\n    return INTERVAL_OPTIONS.find((v) => v.value === query.interval);\n  };\n\n  const getSelectedActivityOption = () => {\n    return query.selectedActivity;\n  };\n\n  const getSelectedSegmentOption = () => {\n    return query.selectedSegmentEffort;\n  };\n\n  const onPropChange = (prop: string) => {\n    return (option: SelectableValue) => {\n      if (option.value) {\n        onChangeInternal({ ...query, [prop]: option.value });\n      }\n    };\n  };\n\n  const onActivityTypeChanged = async (option: SelectableValue<StravaActivityType>) => {\n    if (option.value !== undefined) {\n      onChangeInternal({ ...query, activityType: option.value });\n      fetchActivitiesOptions();\n    }\n  };\n\n  const onFitToRangeChanged = (event: React.FormEvent<HTMLInputElement>) => {\n    onChangeInternal({ ...query, fitToTimeRange: !query.fitToTimeRange });\n  };\n\n  const onActivityChanged = (option: SelectableValue<number>) => {\n    if (option.value !== undefined) {\n      onChangeInternal({ ...query, activityId: option.value, selectedActivity: option });\n    }\n  };\n\n  const onSegmentChanged = (option: SelectableValue<number>) => {\n    if (option.value !== undefined) {\n      onChangeInternal({ ...query, segmentEffortId: option.value, selectedSegmentEffort: option });\n    }\n  };\n\n  const onExtendedStatsChanged = (options: Array<SelectableValue<string>>) => {\n    if (options) {\n      const values: string[] = [];\n      options.forEach((option) => option.value && values.push(option.value));\n      onChangeInternal({ ...query, extendedStats: values });\n    }\n  };\n\n  const onChangeInternal = (query: StravaQuery) => {\n    onChange(query);\n    onRunQuery();\n  };\n\n  const renderActivitiesEditor = () => {\n    return (\n      <>\n        <InlineFieldRow>\n          <InlineFormLabel width={12}>&nbsp;</InlineFormLabel>\n          <InlineField label=\"Format\" labelWidth={10}>\n            <Select\n              isSearchable={false}\n              width={16}\n              options={FORMAT_OPTIONS}\n              onChange={onPropChange('format')}\n              value={getFormatOption()}\n            />\n          </InlineField>\n          {query.format !== StravaQueryFormat.Heatmap && (\n            <InlineField label=\"Stat\" labelWidth={12}>\n              <Select\n                isSearchable={false}\n                width={16}\n                value={getSelectedActivityStat()}\n                options={stravaActivityStatOptions}\n                onChange={onPropChange('activityStat')}\n              />\n            </InlineField>\n          )}\n          {query.format === StravaQueryFormat.TimeSeries && (\n            <InlineField label=\"Interval\" labelWidth={12}>\n              <Select\n                isSearchable={false}\n                width={16}\n                options={INTERVAL_OPTIONS}\n                onChange={onPropChange('interval')}\n                value={getIntervalOption()}\n              />\n            </InlineField>\n          )}\n          <div className=\"gf-form gf-form--grow\">\n            <div className=\"gf-form-label gf-form-label--grow\" />\n          </div>\n        </InlineFieldRow>\n        {query.format === StravaQueryFormat.Table && (\n          <InlineFieldRow>\n            <InlineFormLabel width={12}>&nbsp;</InlineFormLabel>\n            <InlineField label=\"Extended Stats\" labelWidth={14}>\n              <MultiSelect\n                isSearchable\n                isClearable\n                value={query.extendedStats}\n                options={extendedStatsOptions}\n                onChange={onExtendedStatsChanged}\n              />\n            </InlineField>\n            <div className=\"gf-form gf-form--grow\">\n              <div className=\"gf-form-label gf-form-label--grow\" />\n            </div>\n          </InlineFieldRow>\n        )}\n      </>\n    );\n  };\n\n  const renderActivityEditor = () => {\n    return (\n      <>\n        <InlineFieldRow>\n          <InlineFormLabel width={12}>&nbsp;</InlineFormLabel>\n          <InlineField label=\"Activity\" labelWidth={10}>\n            <Select\n              isSearchable={true}\n              width={30}\n              value={getSelectedActivityOption()}\n              options={activitiesOptions}\n              onChange={onActivityChanged}\n            />\n          </InlineField>\n          <InlineField label=\"Data\" labelWidth={10}>\n            <Select\n              isSearchable={false}\n              width={16}\n              value={getSelectedActivityData()}\n              options={stravaActivityDataOptions}\n              onChange={onPropChange('activityData')}\n            />\n          </InlineField>\n          {query.activityData === StravaActivityData.Graph && (\n            <InlineField>\n              <Select\n                isSearchable={false}\n                width={16}\n                value={getSelectedActivityGraph()}\n                options={stravaActivityGraphOptions}\n                onChange={onPropChange('activityGraph')}\n              />\n            </InlineField>\n          )}\n          {query.activityData === StravaActivityData.Splits && (\n            <InlineField>\n              <Select\n                isSearchable={false}\n                width={16}\n                value={getSelectedActivitySplit()}\n                options={stravaActivitySplitOptions}\n                onChange={onPropChange('splitStat')}\n              />\n            </InlineField>\n          )}\n          {query.activityData === StravaActivityData.Stats && (\n            <InlineField>\n              <Select\n                isSearchable\n                allowCustomValue\n                width={20}\n                value={getSelectedSingleActivityStat()}\n                options={stravaStatsOptions}\n                onChange={onPropChange('singleActivityStat')}\n              />\n            </InlineField>\n          )}\n          <InlineField label=\"Fit to range\" labelWidth={10}>\n            <InlineSwitch value={query.fitToTimeRange || false} onChange={onFitToRangeChanged} />\n          </InlineField>\n          <div className=\"gf-form gf-form--grow\">\n            <div className=\"gf-form-label gf-form-label--grow\" />\n          </div>\n        </InlineFieldRow>\n      </>\n    );\n  };\n\n  const renderSegmentEffortEditor = () => {\n    return (\n      <>\n        <InlineFieldRow>\n          <InlineFormLabel width={12}>&nbsp;</InlineFormLabel>\n          <InlineField label=\"Activity\" labelWidth={10}>\n            <Select\n              isSearchable={true}\n              width={32}\n              value={getSelectedActivityOption()}\n              options={activitiesOptions}\n              onChange={onActivityChanged}\n            />\n          </InlineField>\n          <InlineField label=\"Segment effort\" labelWidth={14}>\n            <Select\n              isSearchable={true}\n              width={32}\n              value={getSelectedSegmentOption()}\n              options={segmentsOptions}\n              onChange={onSegmentChanged}\n            />\n          </InlineField>\n          <div className=\"gf-form gf-form--grow\">\n            <div className=\"gf-form-label gf-form-label--grow\" />\n          </div>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineFormLabel width={12}>&nbsp;</InlineFormLabel>\n          <InlineField label=\"Data\" labelWidth={10}>\n            <Select\n              isSearchable={false}\n              width={16}\n              value={getSelectedSegmentData()}\n              options={stravaSegmentDataOptions}\n              onChange={onPropChange('segmentData')}\n            />\n          </InlineField>\n          {query.segmentData === StravaActivityData.Graph && (\n            <InlineField>\n              <Select\n                isSearchable={false}\n                width={16}\n                value={getSelectedSegmentGraph()}\n                options={stravaActivityGraphOptions}\n                onChange={onPropChange('segmentGraph')}\n              />\n            </InlineField>\n          )}\n          {query.activityData === StravaActivityData.Splits && (\n            <InlineField>\n              <Select\n                isSearchable={false}\n                width={16}\n                value={getSelectedActivitySplit()}\n                options={stravaActivitySplitOptions}\n                onChange={onPropChange('splitStat')}\n              />\n            </InlineField>\n          )}\n          {query.activityData === StravaActivityData.Stats && (\n            <InlineField>\n              <Select\n                isSearchable\n                allowCustomValue\n                width={20}\n                value={getSelectedSingleActivityStat()}\n                options={stravaStatsOptions}\n                onChange={onPropChange('singleActivityStat')}\n              />\n            </InlineField>\n          )}\n          <InlineField label=\"Fit to range\" labelWidth={10}>\n            <InlineSwitch value={query.fitToTimeRange || false} onChange={onFitToRangeChanged} />\n          </InlineField>\n          <div className=\"gf-form gf-form--grow\">\n            <div className=\"gf-form-label gf-form-label--grow\" />\n          </div>\n        </InlineFieldRow>\n      </>\n    );\n  };\n\n  const queryType = getSelectedQueryType();\n\n  return (\n    <>\n      <InlineFieldRow>\n        <AthleteLabel athlete={athlete} isLoading={athleteLoading} />\n        <InlineField label=\"Query\" labelWidth={10}>\n          <Select\n            isSearchable={false}\n            width={20}\n            value={queryType}\n            options={stravaQueryTypeOptions}\n            onChange={onPropChange('queryType')}\n          />\n        </InlineField>\n        <InlineField label=\"Activity type\" labelWidth={12}>\n          <Select\n            isSearchable={false}\n            width={16}\n            value={getSelectedActivityType()}\n            options={stravaActivityTypeOptions}\n            onChange={onActivityTypeChanged}\n          />\n        </InlineField>\n        <div className=\"gf-form gf-form--grow\">\n          <div className=\"gf-form-label gf-form-label--grow\" />\n        </div>\n      </InlineFieldRow>\n      {queryType?.value === StravaQueryType.Activities && renderActivitiesEditor()}\n      {queryType?.value === StravaQueryType.Activity && renderActivityEditor()}\n      {queryType?.value === StravaQueryType.SegmentEffort && renderSegmentEffortEditor()}\n    </>\n  );\n};\n","import { DataSourcePlugin } from '@grafana/data';\nimport { StravaVariableQueryEditor } from './components/VariableQueryEditor';\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { QueryEditor } from './components/QueryEditor';\nimport StravaDatasource from './datasource';\nimport { StravaJsonData, StravaQuery } from './types';\n\nclass StravaAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport const plugin = new DataSourcePlugin<StravaDatasource, StravaQuery, StravaJsonData>(StravaDatasource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor)\n  .setAnnotationQueryCtrl(StravaAnnotationsQueryCtrl)\n  .setVariableQueryEditor(StravaVariableQueryEditor);\n"],"sourceRoot":""}